<!DOCTYPE html>
<html lang="ru" data-theme="light">
  <head>
    <meta http-equiv="content-type" content="text/html; charset=utf-8" />
    <meta http-equiv="Content-Language" content="ru" />
    <meta http-equiv="X-UA-Compatible" content="IE=11" />
    <meta content="Перевод на русский: Сергей Леонов (aka Leserg)" name="description" />
    <title>Программирование: Функции событий</title>
    <link rel="stylesheet" type="text/css" href="../css/styles.css" />
    <link rel="stylesheet" type="text/css" href="../css/shared.css" />
    <script type="text/javascript" src="../js/topic.js"></script>
    <script type="text/javascript" src="../js/jquery.js"></script>
    <script type="text/javascript" src="../js/highlight.js"></script>
    <script type="text/javascript">
      $(document).ready(function(){highlight();});
    </script>
  </head>
  <body>
    <h1 class="topicheading">Программирование: Функции событий</h1>
    <div class="topicbody">
      <p>Pascal-сценарий может содержать несколько функций, которые вызываются
        при определённых событиях.</p>
      <h2 class="heading">Функции событий программы установки</h2>
      <p>Программа установки поддерживает следующие функции
        событий:</p>
      <dl>
        <dt class="func">function <a name="InitializeSetup">InitializeSetup</a>(): Boolean;</dt>
        <dd class="paramlist1">
          <p>Вызывается во время инициализации программы установки. В случае
            успеха возвращает значение <tt>True</tt>, иначе <tt>False</tt> и
            работа программы установки прерывается.</p>
        </dd>
        <dt class="func">procedure <a name="InitializeWizard">InitializeWizard</a>();</dt>
        <dd class="paramlist1">
          <p>Вызывается при создании формы мастера установки. Эту функцию можно
            использовать для внесения изменений в форму или страницы мастера
            установки. Для этого нельзя использовать функцию <tt>InitializeSetup</tt>,
            поскольку на момент запуска инсталлятора форма мастера ещё не
            существует.</p>
        </dd>
        <dt class="func">procedure <a name="DeinitializeSetup">DeinitializeSetup</a>();</dt>
        <dd class="paramlist1">
          <p>Вызывается перед завершением программы установки. Обратите
            внимание, что эта функция вызывается даже, если пользователь
            преждевременно завершит работу программы установки.</p>
        </dd>
        <dt class="func">procedure <a name="CurStepChanged">CurStepChanged</a>(CurStep: <a href="#TSetupStep">TSetupStep</a>);</dt>
        <dd class="paramlist1">
          <p>Вызывается на определённых этапах установки и может использоваться
            для выполнения собственных задач до и после процесса установки.</p>
          <p>При <tt>CurStep=ssInstall</tt> вызов выполняется перед началом
            фактической установки; при <tt>CurStep=ssPostInstall</tt> — сразу
            по окончании фактической установки; при <tt>CurStep=ssDone</tt> —
            непосредственно перед завершением программы установки, если
            инсталляция завершилась успешно.</p>
        </dd>
        <dt class="func">procedure <a name="CurInstallProgressChanged">CurInstallProgressChanged</a>(CurProgress, MaxProgress: Integer);</dt>
        <dd class="paramlist1">
          <p>Вызывается при изменении текущего прогресса установки и может
            использоваться для отслеживания прогресса извлечения файлов,
            создания ярлыков, создания записей в INI-файлах или реестре.</p>
        </dd>
        <dt class="func">function <a name="NextButtonClick">NextButtonClick</a>(<a href="#PageID">CurPageID</a>: Integer): Boolean;</dt>
        <dd class="paramlist1">
          <p>Вызывается при нажатии кнопки "<i>Далее</i>". Если функция вернёт
            значение <tt>True</tt>, мастер перейдёт на следующую страницу. При
            значении <tt>False</tt> мастер останется на текущей странице
            (указанной в параметре <tt>CurPageID</tt>).</p>
          <p>Обратите внимание, что эта функция также вызывается при тихой
            установке, несмотря на отсутствие кнопки "<i>Далее</i>", которую
            пользователь может нажать. Вместо этого программа установки
            имитирует "нажатия" на кнопку "<i>Далее</i>". При тихой установке,
            если функция <tt>NextButtonClick</tt> вернёт значение <tt>False</tt>
            до начала процесса установки, программа установки автоматически
            завершит свою работу.</p>
        </dd>
        <dt class="func">function <a name="BackButtonClick">BackButtonClick</a>(<a href="#PageID">CurPageID</a>: Integer): Boolean;</dt>
        <dd class="paramlist1">
          <p>Вызывается при нажатии кнопки "<i>Назад</i>". Если функция вернёт
            значение <tt>True</tt>, мастер перейдёт на предыдущую страницу. При
            значении <tt>False</tt> мастер останется на текущей странице
            (указанной в параметре <tt>CurPageID</tt>).</p>
        </dd>
        <dt class="func">procedure <a name="CancelButtonClick">CancelButtonClick</a>(<a  href="#PageID">CurPageID</a>: Integer; var Cancel, Confirm: Boolean);</dt>
        <dd class="paramlist1">
          <p>Вызывается при нажатии кнопки "<i>Отмена</i>", или "<i>Закрыть</i>"
            в заголовке окна. Параметр <tt>Cancel</tt> определяет обычную
            обработку команды отмены и по умолчанию имеет значение <tt>True</tt>.
            Параметр <tt>Confirm</tt> определяет отображение сообщения "<i>Выйти
              из программы установки?</i>" и по умолчанию равен <tt>True</tt>.
            Если параметр <tt>Cancel</tt> имеет значение <tt>False</tt>,
            значение параметра <tt>Confirm</tt> игнорируется.</p>
        </dd>
        <dt class="func">function <a name="ShouldSkipPage">ShouldSkipPage</a>(<a href="#PageID">PageID</a>: Integer): Boolean;</dt>
        <dd class="paramlist1">
          <p>Вызывается при определении условия пропуска определённой страницы
            (указанной в параметре <tt>PageID</tt>). Если функция вернёт
            значение <tt>True</tt>, страница будет пропущена. При значении <tt>False</tt>
            страница может быть показана.</p>
          <p>Примечание: эта функция не вызывается для страниц <tt>wpPreparing</tt>
            и <tt>wpInstalling</tt>, а также страниц, для которых программа
            установки уже определила, что они должны быть пропущены (например,
            страница <tt>wpSelectComponents</tt>, если инсталлятор не содержит
            компонентов).</p>
        </dd>
        <dt class="func">procedure <a name="CurPageChanged">CurPageChanged</a>(<a href="#PageID">CurPageID</a>: Integer);</dt>
        <dd class="paramlist1">
          <p>Вызывается после отображения определённой страницы (указанной в
            параметре <tt>CurPageID</tt>).</p>
        </dd>
        <dt class="func">function <a name="CheckPassword">CheckPassword</a>(Password: String): Boolean;</dt>
        <dd class="paramlist1">
          <p>Если программа установки обнаружит в сценарии функцию <tt>CheckPassword</tt>,
            она автоматически отобразит страницу <i>Пароль</i> и выполнит вызов
            <tt>CheckPassword</tt> для проверки пароля. Возвращает значение <tt>True</tt>,
            если пароль принят, и <tt>False</tt>, если пароль отклонен.</p>
          <p>Чтобы обезопасить свой инсталлятор, не указывайте пароль для
            сравнения с пользовательским вводом в открытом виде. Вместо этого
            используйте хеширование строк. Определите хеш действительного пароля
            по алгоритму SHA-256, затем укажите это значение в функции проверки,
            сравнивая его с введённым паролем посредством <tt><a href="topic_isxfunc_getsha256ofstring.htm">GetSHA256OfString</a>(Password)</tt>.
            Таким образом, фактическое значение пароля останется защищённым.</p>
          <p>Примечание: если программа установки запущена с <a href="topic_setupcmdline.htm#PASSWORD">параметром
              командной строки</a> /PASSWORD=, функция <tt>CheckPassword</tt>
            будет вызвана <i>ранее</i> других функций события, включая <tt><a
                href="#InitializeSetup">InitializeSetup</a></tt>.</p>
          <p>Также обратите внимание: если для директивы <tt><a
            href="topic_setup_encryption.htm">Encryption</a></tt> установлено
            значение <tt>yes</tt>, а функция проверки пароля <tt>CheckPassword</tt>
            принимает пароли, которые отличаются от используемых для шифрования,
            убедитесь, что извлекаете только незашифрованные файлы.</p>
        </dd>
        <dt class="func">function <a name="NeedRestart">NeedRestart</a>(): Boolean;</dt>
        <dd class="paramlist1">
          <p>Вызывается при проверке условия перезагрузки ПК. Если функция
            возвращает значение <tt>True</tt>, то при успешном завершении
            установки пользователю будет предложено выполнить перезагрузку ПК,
            иначе <tt>False</tt>.</p>
        </dd>
        <dt class="func">function <a name="UpdateReadyMemo">UpdateReadyMemo</a>(Space, NewLine, MemoUserInfoInfo, MemoDirInfo, MemoTypeInfo, MemoComponentsInfo, MemoGroupInfo, MemoTasksInfo: String): String;</dt>
        <dd class="paramlist1">
          <p>Если программа установки обнаружит в сценарии функцию <tt>UpdateReadyMemo</tt>,
            она автоматически выполнит её вызов, когда страница "<i>Всё готово к
              установке</i>" станет активной. Функция должна вернуть текст,
            показанный в поле настроек установки на странице мастера "<i>Всё
              готово к установке</i>", в виде единственной строки, где
            многострочный текст разделён параметром <tt>NewLine</tt>. Параметр
            <tt>Space</tt> содержит строку с пробелами. Программа установки
            использует эту строку для создания отступа при выводе настроек.
            Другие параметры содержат строки (могут быть пустыми), которые
            программа установки использовала бы в качестве разделов настроек.
            Параметр <tt>MemoDirInfo</tt>, к примеру, содержит строку для
            раздела <i>Папка установки</i>.</p>
        </dd>
        <dt class="func">procedure <a name="RegisterPreviousData">RegisterPreviousData</a>(PreviousDataKey: Integer);</dt>
        <dd class="paramlist1">
          <p>Чтобы сохранить пользовательские параметры, введённые на
            пользовательских страницах мастера, поместите в сценарий функцию <tt>RegisterPreviousData</tt>
            и выполните из неё вызов функции <a href="topic_isxfunc_setpreviousdata.htm">SetPreviousData(PreviousDataKey,
              ...)</a> соответственно для каждого параметра.</p>
        </dd>
        <dt class="func">function <a name="CheckSerial">CheckSerial</a>(Serial: String): Boolean;</dt>
        <dd class="paramlist1">
          <p>Если программа установки обнаружит в сценарии функцию <tt>CheckSerial</tt>,
            она автоматически отобразит поле ввода серийного номера на странице
            "<i>Информация о пользователе</i>" (эта страница должна быть
            включена с использованием директивы <tt>UserInfoPage=yes</tt> в
            секции [Setup]!). Возвращает значение <tt>True</tt>, если серийный
            номер принят, и <tt>False</tt>, если серийный номер отклонен. При
            использовании серийных номеров важно помнить, что, поскольку
            шифрование не используется и исходный код Inno Setup находится в
            свободном доступе, опытному специалисту не составит особого труда
            снять такую защиту с программы установки. Используйте эту функцию
            только для удобства конечного пользователя и повторной проверки
            введённого серийного номера (записанного в константу <tt>{userinfoserial}</tt>)
            для вашего приложения.</p>
        </dd>
        <dt class="func">function <a name="GetCustomSetupExitCode">GetCustomSetupExitCode</a>: Integer;</dt>
        <dd class="paramlist1">
          <p>Вызывается только в том случае, если программа установки успешно
            завершила свою работу и код выхода был равен 0. Используйте
            ненулевое число, чтобы инструктировать программу установки вернуть
            пользовательский код выхода. См. также "<a href="topic_setupexitcodes.htm">Коды
              выхода программы установки</a>".</p>
        </dd>
        <dt class="func">function <a name="PrepareToInstall">PrepareToInstall</a>(var NeedsRestart: Boolean): String;</dt>
        <dd class="paramlist1">
          <p>Эту функцию можно использовать для обнаружения и установки
            недостающих зависимостей и/или завершения работы любого приложения,
            которое должно быть обновлено.</p>
          <p>Используйте непустую строку, чтобы инструктировать программу
            установки остановиться на странице мастера "<a href="topic_wizardpages.htm">Подготовка
              к установке</a>" и вывести указанную строку в качестве сообщения
            об ошибке. Если требуется выполнить перезагрузку, установите для
            функции <tt>NeedsRestart</tt> значение <tt>True</tt> (и верните
            непустую строку). При остановке программы установки таким путём, она
            будет завершена с кодом выхода, описанными в разделе "<a href="topic_setupexitcodes.htm">Коды
              выхода программы установки</a>". Любой пользовательский код
            выхода, заданный <a href="topic_setupcmdline.htm#RESTARTEXITCODE">параметром
              командной строки</a> /RESTARTEXITCODE=, в этом случае
            использоваться не будет.</p>
          <p>Если директива <a href="topic_setup_closeapplications.htm">CloseApplications</a>
            имеет значение <tt>yes</tt>, эта функция вызывается перед проверкой
            используемых файлов.</p>
          <p>Эта функция вызывается только в том случае, если программа
            установки ещё не определила, что она не может продолжить работу,
            поскольку один или несколько файлов, указанных в секциях <tt>[Files]</tt>
            и <tt>[InstallDelete]</tt>, были поставлены в очередь (какой-то
            другой установкой) для замены или удаления при следующем
            перезапуске.</p>
        </dd>
        <dt class="func">procedure <a name="RegisterExtraCloseApplicationsResources">RegisterExtraCloseApplicationsResources</a>;</dt>
        <dd class="paramlist1">
          <p>Чтобы зарегистрировать дополнительные файлы, которые программа
            установки должна проверить на предмет использования, когда для
            параметра <a href="topic_setup_closeapplications.htm">CloseApplications</a>
            задано значение <tt>yes</tt>, поместите в сценарий функцию <tt>RegisterExtraCloseApplicationsResources</tt>
            и выполните из неё вызов функции <a href="topic_isxfunc_registerextracloseapplicationsresource.htm">RegisterExtraCloseApplicationsResource</a>,
            соответственно для каждого файла.</p>
        </dd>
      </dl>
      <h2 class="heading">Функции событий программы удаления</h2>
      <p>Программа удаления поддерживает следующие функции
        событий:</p>
      <dl>
        <dt class="func">function <a name="InitializeUninstall">InitializeUninstall</a>(): Boolean;</dt>
        <dd class="paramlist1">
          <p>Вызывается во время инициализации программы удаления. В случае
            успеха возвращает значение <tt>True</tt>, иначе <tt>False</tt> и
            работа программы удаления прерывается.</p>
        </dd>
        <dt class="func">procedure <a name="InitializeUninstallProgressForm">InitializeUninstallProgressForm</a>();</dt>
        <dd class="paramlist1">
          <p>Вызывается при создании формы с прогрессом удаления и может
            использоваться для внесения в неё изменений. Для этих целей нельзя
            использовать функцию <tt>InitializeUninstall</tt>, поскольку на
            момент запуска деинсталлятора форма с прогрессом удаления ещё не
            существует.</p>
        </dd>
        <dt class="func">procedure <a name="DeinitializeUninstall">DeinitializeUninstall</a>();</dt>
        <dt class="func">procedure <a name="CurUninstallStepChanged">CurUninstallStepChanged</a>(CurUninstallStep: <a href="#TUninstallStep">TUninstallStep</a>);</dt>
        <dt class="func">function <a name="UninstallNeedRestart">UninstallNeedRestart</a>(): Boolean;</dt>
        <dd class="paramlist1">
          <p>Вызывается при проверке условия перезагрузки ПК. Если функция
            возвращает значение <tt>True</tt>, то при успешном завершении
            удаления пользователю будет предложено выполнить перезагрузку ПК,
            иначе <tt>False</tt>.</p>
        </dd>
      </dl>
      <h2 class="heading">Константы</h2>
      <p>Ниже приведен перечень констант, используемых этими
        функциями:</p>
      <ul>
        <li><i><a name="TSetupStep">Значения TSetupStep</a></i><br />
          ssInstall, ssPostInstall, ssDone</li>
        <li><i><a name="TUninstallStep">Значения TUninstallStep</a>s</i><br />
          usAppMutexCheck, usUninstall, usPostUninstall, usDone</li>
        <li><i>Значения <a name="PageID">PageID</a> для предопределённых <a href="topic_wizardpages.htm">страниц
              мастера</a></i><br />
          wpWelcome, wpLicense, wpPassword, wpInfoBefore, wpUserInfo,
          wpSelectDir, wpSelectComponents, wpSelectProgramGroup, wpSelectTasks,
          wpReady, wpPreparing, wpInstalling, wpInfoAfter, wpFinished</li>
      </ul>
      <h2 class="heading"><a name="eventattributes">Атрибуты события</a></h2>
      <p>Как правило, сценарий может содержать только одну
        реализацию для каждой функции события. Используя атрибуты события,
        сценарий может иметь несколько реализаций одной и той же функции
        события. Особенно хорошо их эффективность проявляется во включенных
        сценариях, реализующих функции событий, что позволяет избежать
        конфликтов с основным сценарием.</p>
      <p>Ниже приведен пример сценария, который содержит три
        реализации функции <tt>InitializeWizard</tt>.</p>
      <pre class="indent examplebox"><span class="hl kwa">[Code]</span>
<span class="hl kwb">procedure</span> <span class="hl kwd">InitializeWizard</span>;
<span class="hl kwb">begin</span>
  Log(<span class="hl str">'InitializeWizard called'</span>);
<span class="hl kwb">end</span>;

&lt;event(<span class="hl str">'InitializeWizard'</span>)&gt;
<span class="hl kwb">procedure</span> InitializeWizard2;
<span class="hl kwb">begin</span>
  Log(<span class="hl str">'InitializeWizard2 called'</span>);
<span class="hl kwb">end</span>;

&lt;event(<span class="hl str">'InitializeWizard'</span>)&gt;
<span class="hl kwb">procedure</span> InitializeWizard3;
<span class="hl kwb">begin</span>
  Log(<span class="hl str">'InitializeWizard3 called'</span>);
<span class="hl kwb">end</span>;</pre>
      <p>При использовании атрибутов события действуют следующие
        правила:</p>
      <ul>
        <li>Реализации будут вызываться в порядке их определения за исключением
          того, что любая основная реализация (<i>реализация без атрибута
            события</i>) будет вызываться последней.</li>
        <li>Атрибуты события могут использоваться для всех функций событий. Если
          функция события имеет возвращаемое значение, выполняется отложенное
          вычисление результата:</li>
        <ul>
          <li><tt>InitializeSetup</tt>, <tt>BackButtonClick</tt>, <tt>NextButtonClick</tt>,
            <tt>InitializeUninstall</tt>: все реализации этих функций должны
            возвращать значение <tt>True</tt>, чтобы основная функция события
            рассматривалась как возвращающая <tt>True</tt>, а реализация,
            возвращающая значение <tt>False</tt>, прекращает вызовы других
            реализаций.</li>
          <li><tt>CheckPassword</tt>, <tt>CheckSerial</tt>, <tt>ShouldSkipPage</tt>,
            <tt>NeedRestart</tt>: все реализации этих функций должны возвращать
            значение <tt>False</tt>, чтобы основная функция события
            рассматривалась как возвращающая <tt>False</tt>, а реализация,
            возвращающая значение <tt>True</tt>, прекращает вызовы других
            реализаций.</li>
          <li><tt>UpdateReadyMemo</tt>, <tt>PrepareToInstall</tt>: все
            реализации этих функций должны возвращать <i>пустую строку</i>,
            чтобы основная функция события рассматривалась как возвращающая <i>пустую
              строку</i>, а реализация, возвращающая <i>не пустую строку</i>,
            прекращает вызовы других реализаций.</li>
          <li><tt>GetCustomSetupExitCode</tt>: все реализации этой функции
            должны возвращать <i>нулевое значение</i>, чтобы основная функция
            события рассматривалась как возвращающая <i>нулевое значение</i>, а
            реализация, возвращающая <i>не нулевое значение</i>, прекращает
            вызовы других реализаций.</li>
        </ul>
        <li>Атрибуты события могут использоваться только для процедур или
          функций, у которых ещё нет имени функции события.</li>
        <li>Если функция события использует параметры <tt>var</tt>, то значение
          будет передаваться от одной реализации к другой.</li>
        <li>Для вызова самой реализации с атрибутом события из секции <tt>[Code]</tt>,
          следует использовать обычное имя функции, как если бы реализация не
          имела атрибута события.</li>
      </ul>
    </div>
  <script type="text/javascript" src="../js/theme_selector.js"></script>
  </body>
</html>
