<!DOCTYPE html>
<html lang="ru" data-theme="light">
  <head>
    <meta http-equiv="content-type" content="text/html; charset=utf-8" />
    <meta http-equiv="Content-Language" content="ru" />
    <meta http-equiv="X-UA-Compatible" content="IE=11" />
    <meta content="Перевод на русский: Сергей Леонов (aka Leserg)" name="description" />
    <title>Программирование: Поддерживаемые классы</title>
    <link rel="stylesheet" type="text/css" href="../css/styles.css" />
    <link rel="stylesheet" type="text/css" href="../css/shared.css" />
    <script type="text/javascript" src="../js/topic.js"></script>
    <script type="text/javascript" src="../js/jquery.js"></script>
    <script type="text/javascript" src="../js/highlight.js"></script>
    <script type="text/javascript">
      $(document).ready(function(){highlight();});
    </script>
  </head>
  <body>
    <h1 class="topicheading">Программирование: Поддерживаемые классы</h1>
    <div class="topicbody">
      <p>Ниже представлен список поддерживаемых классов, которые могут быть
        использованы при создании Pascal-сценариев. Кроме того, поддерживаются
        два объекта, доступные глобально:</p>
      <ul>
        <li><code><a name="WizardForm">WizardForm</a></code> — тип <a

            href="#TWizardForm">TWizardForm</a>.</li>
        <li><code><a name="UninstallProgressForm">UninstallProgressForm</a></code>
          — тип <a href="#TUninstallProgressForm">TUninstallProgressForm</a>.</li>
      </ul>
      <p>Тип параметра <tt>AnyString</tt> означает, что можно использовать как
        <tt>String</tt>, так и <tt>AnsiString</tt>.</p>
      <p>В примере сценария <i>CodeClasses.iss</i> из папки "Examples" в
        каталоге установки Inno Setup показано, как использовать эти классы.</p>
      <p>Примечание: рекомендуем также обратиться к справочной документации
        Delphi Visual Component Library (VCL) компании Embarcadero Technologies,
        поскольку приведенные ниже классы в основном представляют собой простые
        обёртки для классов VCL, используемых Inno Setup.<br />
        <br />
        &nbsp;&nbsp;См. документацию <a href="http://docwiki.embarcadero.com/RADStudio/Alexandria/en/VCL"
          target="_blank" title="http://docwiki.embarcadero.com/RADStudio/Alexandria/en/VCL">http://docwiki.embarcadero.com/RADStudio/Alexandria/en/VCL</a><img
          src="../images/extlink.svg" alt=" [внешняя ссылка]" />.</p>
      <p class="null"><br />
        <code>
          <a name="TObject">TObject</a> = class<br />
          &nbsp;&nbsp;constructor Create;<br />
          &nbsp;&nbsp;procedure Free;<br />
          end;<br />
          <br />
          <a name="TPersistent">TPersistent</a> = class(<a href="#TObject">TObject</a>)<br />
          &nbsp;&nbsp;procedure Assign(Source: <a href="#TPersistent">TPersistent</a>);<br />
          end;<br />
          <br />
          <a name="TComponent">TComponent</a> = class(<a href="#TPersistent">TPersistent</a>)<br />
          &nbsp;&nbsp;function FindComponent(AName: String): <a href="#TComponent">TComponent</a>;<br />
          &nbsp;&nbsp;constructor Create(AOwner: <a href="#TComponent">TComponent</a>);<br />
          &nbsp;&nbsp;property Owner: <a href="#TComponent">TComponent</a>; read write;<br />
          &nbsp;&nbsp;procedure DestroyComponents;<br />
          &nbsp;&nbsp;procedure Destroying;<br />
          &nbsp;&nbsp;procedure FreeNotification(AComponent: <a href="#TComponent">TComponent</a>);<br />
          &nbsp;&nbsp;procedure InsertComponent(AComponent: <a href="#TComponent">TComponent</a>);<br />
          &nbsp;&nbsp;procedure RemoveComponent(AComponent: <a href="#TComponent">TComponent</a>);<br />
          &nbsp;&nbsp;property Components[Index: Integer]: <a href="#TComponent">TComponent</a>; read;<br />
          &nbsp;&nbsp;property ComponentCount: Integer; read;<br />
          &nbsp;&nbsp;property ComponentIndex: Integer; read write;<br />
          &nbsp;&nbsp;property ComponentState: Byte; read;<br />
          &nbsp;&nbsp;property DesignInfo: Longint; read write;<br />
          &nbsp;&nbsp;property Name: String; read write;<br />
          &nbsp;&nbsp;property Tag: Longint; read write;<br />
          end;<br />
          <br />
          <a name="TStrings">TStrings</a> = class(<a href="#TPersistent">TPersistent</a>)<br />
          &nbsp;&nbsp;function Add(S: String): Integer;<br />
          &nbsp;&nbsp;procedure Append(S: String);<br />
          &nbsp;&nbsp;procedure AddStrings(Strings: <a href="#TStrings">TStrings</a>);<br />
          &nbsp;&nbsp;procedure Clear;<br />
          &nbsp;&nbsp;procedure Delete(Index: Integer);<br />
          &nbsp;&nbsp;function IndexOf(const S: String): Integer;<br />
          &nbsp;&nbsp;procedure Insert(Index: Integer; S: String);<br />
          &nbsp;&nbsp;property Count: Integer; read;<br />
          &nbsp;&nbsp;property Text: String; read write;<br />
          &nbsp;&nbsp;property CommaText: String; read write;<br />
          &nbsp;&nbsp;procedure LoadFromFile(FileName: String);<br />
          &nbsp;&nbsp;procedure SaveToFile(FileName: String);<br />
          &nbsp;&nbsp;property Strings[Index: Integer]: String; read write;<br />
          &nbsp;&nbsp;property Objects[Index: Integer]: <a href="#TObject">TObject</a>; read write;<br />
          end;<br />
          <br />
          <a name="TNotifyEvent">TNotifyEvent</a> = procedure(Sender: <a href="#TObject">TObject</a>);<br />
          <br />
          <a name="TDuplicates">TDuplicates</a> = (dupIgnore, dupAccept, dupError);<br />
          <br />
          <a name="TStringList">TStringList</a> = class(<a href="#TStrings">TStrings</a>)<br />
          &nbsp;&nbsp;function Find(S: String; var Index: Integer): Boolean;<br />
          &nbsp;&nbsp;procedure Sort;<br />
          &nbsp;&nbsp;property Duplicates: <a href="#TDuplicates">TDuplicates</a>; read write;<br />
          &nbsp;&nbsp;property Sorted: Boolean; read write;<br />
          &nbsp;&nbsp;property OnChange: <a href="#TNotifyEvent">TNotifyEvent</a>; read write;<br />
          &nbsp;&nbsp;property OnChanging: <a href="#TNotifyEvent">TNotifyEvent</a>; read write;<br />
          end;<br />
          <br />
          { Значения Seek Origin: soFromBeginning, soFromCurrent, soFromEnd }<br />
          <br />
          <a name="TStream">TStream</a> = class(<a href="#TObject">TObject</a>)<br />
          &nbsp;&nbsp;function Read(var Buffer: AnyString; ByteCount: Longint): Longint;<br />
          &nbsp;&nbsp;function Write(const Buffer: AnyString; ByteCount: Longint): Longint;<br />
          &nbsp;&nbsp;function Seek(Offset: Int64; Origin: Word): Int64;<br />
          &nbsp;&nbsp;procedure ReadBuffer(var Buffer: AnyString; ByteCount: Longint);<br />
          &nbsp;&nbsp;procedure WriteBuffer(const Buffer: AnyString; ByteCount: Longint);<br />
          &nbsp;&nbsp;function CopyFrom(Source: <a href="#TStream">TStream</a>; ByteCount: Int64; BufferSize: Integer): Int64;<br />
          &nbsp;&nbsp;property Position: Longint; read write;<br />
          &nbsp;&nbsp;property Size: Longint; read write;<br />
          end;<br />
          <br />
          <a name="THandleStream">THandleStream</a> = class(<a href="#TStream">TStream</a>)<br />
          &nbsp;&nbsp;constructor Create(AHandle: Integer);<br />
          &nbsp;&nbsp;property Handle: Integer; read;<br />
          end;<br />
          <br />
          <a name="TFileStream">TFileStream</a> = class(<a href="#THandleStream">THandleStream</a>)<br />
          &nbsp;&nbsp;constructor Create(Filename: String; Mode: Word);<br />
          end;<br />
          <br />
          <a name="TStringStream">TStringStream</a> = class(<a href="#TStream">TStream</a>)<br />
          &nbsp;&nbsp;constructor Create(AString: String);<br />
          end;<br />
          <br />
          <a name="TGraphicsObject">TGraphicsObject</a> = class(<a href="#TPersistent">TPersistent</a>)<br />
          &nbsp;&nbsp;property OnChange: <a href="#TNotifyEvent">TNotifyEvent</a>; read write;<br />
          end;<br />
          <br />
          <a name="TBrushStyle">TBrushStyle</a> = (bsSolid, bsClear, bsHorizontal, bsVertical, bsFDiagonal, bsBDiagonal, bsCross, bsDiagCross);<br />
          <br />
          <a name="TBrush">TBrush</a> = class(<a href="#TGraphicsObject">TGraphicsObject</a>)<br />
          &nbsp;&nbsp;constructor Create;<br />
          &nbsp;&nbsp;property Color: <a href="#TColor">TColor</a>; read write;<br />
          &nbsp;&nbsp;property Style: <a href="#TBrushStyle">TBrushStyle</a>; read write;<br />
          end;<br />
          <br />
          <a name="TFontStyle">TFontStyle</a> = (fsBold, fsItalic, fsUnderline, fsStrikeOut);<br />
          <br />
          <a name="TFontStyles">TFontStyles</a> = set of <a href="#TFontStyle">TFontStyle</a>;<br />
          <br />
          <a name="TColor">TColor</a> = Integer;<br />
          <br />
          { Значения <a href="#TColor">TColor</a>: clBlack, clMaroon, clGreen, clOlive, clNavy, clPurple, clTeal, clGray, clSilver, clRed, clLime, clYellow, clBlue, clFuchsia, clAqua, clLtGray, clDkGray, clWhite, clNone, clDefault, clScrollBar, clBackground, clActiveCaption, clInactiveCaption, clMenu, clWindow, clWindowFrame, clMenuText, clWindowText, clCaptionText, clActiveBorder, clInactiveBorder, clAppWorkSpace, clHighlight, clHighlightText, clBtnFace, clBtnShadow, clGrayText, clBtnText, clInactiveCaptionText, clBtnHighlight, cl3DDkShadow, cl3DLight, clInfoText, clInfoBk, clHotLight }<br />
          <br />
          <a name="TFont">TFont</a> = class(<a href="#TGraphicsObject">TGraphicsObject</a>)<br />
          &nbsp;&nbsp;constructor Create;<br />
          &nbsp;&nbsp;property Handle: Integer; read;<br />
          &nbsp;&nbsp;property Color: <a href="#TColor">TColor</a>; read write;<br />
          &nbsp;&nbsp;property Height: Integer; read write;<br />
          &nbsp;&nbsp;property Name: String; read write;<br />
          &nbsp;&nbsp;property Pitch: Byte; read write;<br />
          &nbsp;&nbsp;property Size: Integer; read write;<br />
          &nbsp;&nbsp;property PixelsPerInch: Integer; read write;<br />
          &nbsp;&nbsp;property Style: <a href="#TFontStyles">TFontStyles</a>; read write;<br />
          end;<br />
          <br />
          <a name="TPenMode">TPenMode</a> = (pmBlack, pmWhite, pmNop, pmNot, pmCopy, pmNotCopy, pmMergePenNot, pmMaskPenNot, pmMergeNotPen, pmMaskNotPen, pmMerge, pmNotMerge, pmMask, pmNotMask, pmXor, pmNotXor);<br />
          <br />
          <a name="TPenStyle">TPenStyle</a> = (psSolid, psDash, psDot, psDashDot, psDashDotDot, psClear, psInsideFrame);<br />
          <br />
          <a name="TPen">TPen</a> = class(<a href="#TGraphicsObject">TGraphicsObject</a>)<br />
          &nbsp;&nbsp;constructor Create;<br />
          &nbsp;&nbsp;property Color: <a href="#TColor">TColor</a>; read write;<br />
          &nbsp;&nbsp;property Mode: <a href="#TPenMode">TPenMode</a>; read write;<br />
          &nbsp;&nbsp;property Style: <a href="#TPenStyle">TPenStyle</a>; read write;<br />
          &nbsp;&nbsp;property Width: Integer; read write;<br />
          end;<br />
          <br />
          <a name="TCanvas">TCanvas</a> = class(<a href="#TPersistent">TPersistent</a>)<br />
          &nbsp;&nbsp;procedure Arc(X1, Y1, X2, Y2, X3, Y3, X4, Y4: Integer);<br />
          &nbsp;&nbsp;procedure Chord(X1, Y1, X2, Y2, X3, Y3, X4, Y4: Integer);<br />
          &nbsp;&nbsp;procedure Draw(X, Y: Integer; Graphic: <a href="#TGraphic">TGraphic</a>);<br />
          &nbsp;&nbsp;procedure Ellipse(X1, Y1, X2, Y2: Integer);<br />
          &nbsp;&nbsp;procedure FloodFill(X, Y: Integer; Color: <a href="#TColor">TColor</a>; FillStyle: Byte);<br />
          &nbsp;&nbsp;procedure LineTo(X, Y: Integer);<br />
          &nbsp;&nbsp;procedure MoveTo(X, Y: Integer);<br />
          &nbsp;&nbsp;procedure Pie(X1, Y1, X2, Y2, X3, Y3, X4, Y4: Integer);<br />
          &nbsp;&nbsp;procedure Rectangle(X1, Y1, X2, Y2: Integer);<br />
          &nbsp;&nbsp;procedure Refresh;<br />
          &nbsp;&nbsp;procedure RoundRect(X1, Y1, X2, Y2, X3, Y3: Integer);<br />
          &nbsp;&nbsp;function TextHeight(Text: String): Integer;<br />
          &nbsp;&nbsp;procedure TextOut(X, Y: Integer; Text: String);<br />
          &nbsp;&nbsp;function TextWidth(Text: String): Integer;<br />
          &nbsp;&nbsp;property Handle: Integer; read write;<br />
          &nbsp;&nbsp;property Pixels: Integer Integer Integer; read write;<br />
          &nbsp;&nbsp;property Brush: <a href="#TBrush">TBrush</a>; read;<br />
          &nbsp;&nbsp;property CopyMode: Byte; read write;<br />
          &nbsp;&nbsp;property Font: <a href="#TFont">TFont</a>; read;<br />
          &nbsp;&nbsp;property Pen: <a href="#TPen">TPen</a>; read;<br />
          end;<br />
          <br />
          <a name="TGraphic">TGraphic</a> = class(<a href="#TPersistent">TPersistent</a>)<br />
          &nbsp;&nbsp;procedure LoadFromFile(const Filename: String);<br />
          &nbsp;&nbsp;procedure SaveToFile(const Filename: String);<br />
          &nbsp;&nbsp;property Empty: Boolean; read write;<br />
          &nbsp;&nbsp;property Height: Integer; read write;<br />
          &nbsp;&nbsp;property Modified: Boolean; read write;<br />
          &nbsp;&nbsp;property Width: Integer; read write;<br />
          &nbsp;&nbsp;property OnChange: <a href="#TNotifyEvent">TNotifyEvent</a>; read write;<br />
          end;<br />
          <br />
          <a name="TAlphaFormat">TAlphaFormat</a> = (afIgnored, afDefined, afPremultiplied);<br />
          <br />
          <a name="HBITMAP">HBITMAP</a> = Integer;<br />
          <br />
          <a name="TBitmap">TBitmap</a> = class(<a href="#TGraphic">TGraphic</a>)<br />
          &nbsp;&nbsp;procedure LoadFromStream(Stream: <a href="#TStream">TStream</a>);<br />
          &nbsp;&nbsp;procedure SaveToStream(Stream: <a href="#TStream">TStream</a>);<br />
          &nbsp;&nbsp;property AlphaFormat: <a href="#TAlphaFormat">TAlphaFormat</a>; read write;<br />
          &nbsp;&nbsp;property Canvas: <a href="#TCanvas">TCanvas</a>; read write;<br />
          &nbsp;&nbsp;property Handle: <a href="#HBITMAP">HBITMAP</a>; read write;<br />
          end;<br />
          <br />
          <a name="TAlign">TAlign</a> = (alNone, alTop, alBottom, alLeft, alRight, alClient);<br />
          <br />
          <a name="TAnchorKind">TAnchorKind</a> = (akLeft, akTop, akRight, akBottom);<br />
          <br />
          <a name="TAnchors">TAnchors</a> = set of <a href="#TAnchorKind">TAnchorKind</a>;<br />
          <br />
          <a name="TCursor">TCursor</a> = Integer;<br />
          <br />
          { Значения <a href="#TCursor">TCursor</a>: crDefault, crNone, crArrow, crCross, crIBeam, crSizeNESW, crSizeNS, crSizeNWSE, crSizeWE, crUpArrow, crHourGlass, crDrag, crNoDrop, crHSplit, crVSplit, crMultiDrag, crSQLWait, crNo, crAppStart, crHelp, crHandPoint, crSizeAll, crHand }<br />
          <br />
          <a name="TControl">TControl</a> = class(<a href="#TComponent">TComponent</a>)<br />
          &nbsp;&nbsp;constructor Create(AOwner: <a href="#TComponent">TComponent</a>);<br />
          &nbsp;&nbsp;procedure BringToFront;<br />
          &nbsp;&nbsp;procedure Hide;<br />
          &nbsp;&nbsp;procedure Invalidate;<br />
          &nbsp;&nbsp;procedure Refresh;<br />
          &nbsp;&nbsp;procedure Repaint;<br />
          &nbsp;&nbsp;procedure SendToBack;<br />
          &nbsp;&nbsp;procedure Show;<br />
          &nbsp;&nbsp;procedure Update;<br />
          &nbsp;&nbsp;procedure SetBounds(ALeft, ATop, AWidth, AHeight: Integer);<br />
          &nbsp;&nbsp;property Left: Integer; read write;<br />
          &nbsp;&nbsp;property Top: Integer; read write;<br />
          &nbsp;&nbsp;property Width: Integer; read write;<br />
          &nbsp;&nbsp;property Height: Integer; read write;<br />
          &nbsp;&nbsp;property Hint: String; read write;<br />
          &nbsp;&nbsp;property Align: <a href="#TAlign">TAlign</a>; read write;<br />
          &nbsp;&nbsp;property ClientHeight: Longint; read write;<br />
          &nbsp;&nbsp;property ClientWidth: Longint; read write;<br />
          &nbsp;&nbsp;property ShowHint: Boolean; read write;<br />
          &nbsp;&nbsp;property Visible: Boolean; read write;<br />
          &nbsp;&nbsp;property Enabled: Boolean; read write;<br />
          &nbsp;&nbsp;property Cursor: <a href="#TCursor">TCursor</a>; read write;<br />
          end;<br />
          <br />
          <a name="TWinControl">TWinControl</a> = class(<a href="#TControl">TControl</a>)<br />
          &nbsp;&nbsp;property Parent: <a href="#TWinControl">TWinControl</a>; read write;<br />
          &nbsp;&nbsp;property ParentBackground: Boolean; read write;<br />
          &nbsp;&nbsp;property Handle: Longint; read write;<br />
          &nbsp;&nbsp;property Showing: Boolean; read;<br />
          &nbsp;&nbsp;property TabOrder: Integer; read write;<br />
          &nbsp;&nbsp;property TabStop: Boolean; read write;<br />
          &nbsp;&nbsp;function CanFocus: Boolean;<br />
          &nbsp;&nbsp;function Focused: Boolean;<br />
          &nbsp;&nbsp;property Controls[Index: Integer]: <a href="#TControl">TControl</a>; read;<br />
          &nbsp;&nbsp;property ControlCount: Integer; read;<br />
          end;<br />
          <br />
          <a name="TGraphicControl">TGraphicControl</a> = class(<a href="#TControl">TControl</a>)<br />
          end;<br />
          <br />
          <a name="TCustomControl">TCustomControl</a> = class(<a href="#TWinControl">TWinControl</a>)<br />
          end;<br />
          <br />
          <a name="TScrollingWinControl">TScrollingWinControl</a> = class(<a href="#TWinControl">TWinControl</a>)<br />
          &nbsp;&nbsp;procedure ScrollInView(AControl: <a href="#TControl">TControl</a>);<br />
          end;<br />
          <br />
          <a name="TFormBorderStyle">TFormBorderStyle</a> = (bsNone, bsSingle, bsSizeable, bsDialog, bsToolWindow, bsSizeToolWin);<br />
          <br />
          <a name="TBorderIcon">TBorderIcon</a> = (biSystemMenu, biMinimize, biMaximize, biHelp);<br />
          <br />
          <a name="TBorderIcons">TBorderIcons</a> = set of <a href="#TBorderIcon">TBorderIcon</a>;<br />
          <br />
          <a name="TConstraintSize">TConstraintSize</a> = 0..MaxInt;<br />
          <br />
          <a name="TSizeConstraints">TSizeConstraints</a> = class(<a href="#TPersistent">TPersistent</a>);<br />
          &nbsp;&nbsp;property MaxHeight: <a href="#TConstraintSize">TConstraintSize</a>; read write;<br />
          &nbsp;&nbsp;property MaxWidth: <a href="#TConstraintSize">TConstraintSize</a>; read write;<br />
          &nbsp;&nbsp;property MinHeight: <a href="#TConstraintSize">TConstraintSize</a>; read write;<br />
          &nbsp;&nbsp;property MinWidth: <a href="#TConstraintSize">TConstraintSize</a>; read write;<br />
          end;<br />
          <br />
          <a name="TFormStyle">TFormStyle</a> = (fsNormal, fsMDIChild, fsMDIForm, fsStayOnTop);<br />
          <br />
          <a name="TPopupMode">TPopupMode</a> = (pmNone, pmAuto, pmExplicit);<br />
          <br />
          <a name="TPosition">TPosition</a> = (poDesigned, poDefault, poDefaultPosOnly, poDefaultSizeOnly, poScreenCenter, poDesktopCenter, poMainFormCenter, poOwnerFormCenter);<br />
          <br />
          <a name="TCloseAction">TCloseAction</a> = (caNone, caHide, caFree, caMinimize);<br />
          <br />
          <a name="TCloseEvent">TCloseEvent</a> = procedure(Sender: <a href="#TObject">TObject</a>; var Action: <a href="#TCloseAction">TCloseAction</a>);<br />
          <br />
          <a name="TCloseQueryEvent">TCloseQueryEvent</a> = procedure(Sender: <a href="#TObject">TObject</a>; var CanClose: Boolean);<br />
          <br />
          <a name="TEShiftState">TEShiftState</a> = (ssShift, ssAlt, ssCtrl, ssLeft, ssRight, ssMiddle, ssDouble);<br />
          <br />
          <a name="TShiftState">TShiftState</a> = set of <a href="#TEShiftState">TEShiftState</a>;<br />
          <br />
          <a name="TKeyEvent">TKeyEvent</a> = procedure(Sender: <a href="#TObject">TObject</a>; var Key: Word; Shift: <a href="#TShiftState">TShiftState</a>);<br />
          <br />
          <a name="TKeyPressEvent">TKeyPressEvent</a> = procedure(Sender: <a href="#TObject">TObject</a>; var Key: Char);<br />
          <br />
          <a name="TForm">TForm</a> = class(<a href="#TScrollingWinControl">TScrollingWinControl</a>)<br />
          &nbsp;&nbsp;constructor CreateNew(AOwner: <a href="#TComponent">TComponent</a>);<br />
          &nbsp;&nbsp;procedure Close;<br />
          &nbsp;&nbsp;procedure Hide;<br />
          &nbsp;&nbsp;procedure Show;<br />
          &nbsp;&nbsp;function ShowModal: Integer;<br />
          &nbsp;&nbsp;procedure Release;<br />
          &nbsp;&nbsp;property Active: Boolean; read;<br />
          &nbsp;&nbsp;property ActiveControl: <a href="#TWinControl">TWinControl</a>; read write;<br />
          &nbsp;&nbsp;property Anchors: <a href="#TAnchors">TAnchors</a>; read write;<br />
          &nbsp;&nbsp;property AutoScroll: Boolean; read write;<br />
          &nbsp;&nbsp;property BorderIcons: <a href="#TBorderIcons">TBorderIcons</a>; read write;<br />
          &nbsp;&nbsp;property BorderStyle: <a href="#TFormBorderStyle">TFormBorderStyle</a>; read write;<br />
          &nbsp;&nbsp;property Caption: String; read write;<br />
          &nbsp;&nbsp;property Color: <a href="#TColor">TColor</a>; read write;<br />
          &nbsp;&nbsp;property Constraints: <a href="#TSizeConstraints">TSizeConstraints</a>; read write;<br />
          &nbsp;&nbsp;property Font: <a href="#TFont">TFont</a>; read write;<br />
          &nbsp;&nbsp;property FormStyle: <a href="#TFormStyle">TFormStyle</a>; read write;<br />
          &nbsp;&nbsp;property KeyPreview: Boolean; read write;<br />
          &nbsp;&nbsp;property PopupMode: TPopupMenu; read write;<br />
          &nbsp;&nbsp;property PopupParent: <a href="#TForm">TForm</a>; read write;<br />
          &nbsp;&nbsp;property Position: <a href="#TPosition">TPosition</a>; read write;<br />
          &nbsp;&nbsp;property OnActivate: <a href="#TNotifyEvent">TNotifyEvent</a>; read write;<br />
          &nbsp;&nbsp;property OnClick: <a href="#TNotifyEvent">TNotifyEvent</a>; read write;<br />
          &nbsp;&nbsp;property OnDblClick: <a href="#TNotifyEvent">TNotifyEvent</a>; read write;<br />
          &nbsp;&nbsp;property OnClose: <a href="#TCloseEvent">TCloseEvent</a>; read write;<br />
          &nbsp;&nbsp;property OnCloseQuery: <a href="#TCloseQueryEvent">TCloseQueryEvent</a>; read write;<br />
          &nbsp;&nbsp;property OnCreate: <a href="#TNotifyEvent">TNotifyEvent</a>; read write;<br />
          &nbsp;&nbsp;property OnDestroy: <a href="#TNotifyEvent">TNotifyEvent</a>; read write;<br />
          &nbsp;&nbsp;property OnDeactivate: <a href="#TNotifyEvent">TNotifyEvent</a>; read write;<br />
          &nbsp;&nbsp;property OnHide: <a href="#TNotifyEvent">TNotifyEvent</a>; read write;<br />
          &nbsp;&nbsp;property OnKeyDown: <a href="#TKeyEvent">TKeyEvent</a>; read write;<br />
          &nbsp;&nbsp;property OnKeyPress: <a href="#TKeyPressEvent">TKeyPressEvent</a>; read write;<br />
          &nbsp;&nbsp;property OnKeyUp: <a href="#TKeyEvent">TKeyEvent</a>; read write;<br />
          &nbsp;&nbsp;property OnResize: <a href="#TNotifyEvent">TNotifyEvent</a>; read write;<br />
          &nbsp;&nbsp;property OnShow: <a href="#TNotifyEvent">TNotifyEvent</a>; read write;<br />
          end;<br />
          <br />
          <a name="TCustomLabel">TCustomLabel</a> = class(<a href="#TGraphicControl">TGraphicControl</a>)<br />
          end;<br />
          <br />
          <a name="TAlignment">TAlignment</a> = (taLeftJustify, taRightJustify, taCenter);<br />
          <br />
          <a name="TLabel">TLabel</a> = class(<a href="#TCustomLabel">TCustomLabel</a>)<br />
          &nbsp;&nbsp;property Alignment: <a href="#TAlignment">TAlignment</a>; read write;<br />
          &nbsp;&nbsp;property Anchors: <a href="#TAnchors">TAnchors</a>; read write;<br />
          &nbsp;&nbsp;property AutoSize: Boolean; read write;<br />
          &nbsp;&nbsp;property Caption: String; read write;<br />
          &nbsp;&nbsp;property Color: <a href="#TColor">TColor</a>; read write;<br />
          &nbsp;&nbsp;property FocusControl: <a href="#TWinControl">TWinControl</a>; read write;<br />
          &nbsp;&nbsp;property Font: <a href="#TFont">TFont</a>; read write;<br />
          &nbsp;&nbsp;property WordWrap: Boolean; read write;<br />
          &nbsp;&nbsp;property OnClick: <a href="#TNotifyEvent">TNotifyEvent</a>; read write;<br />
          &nbsp;&nbsp;property OnDblClick: <a href="#TNotifyEvent">TNotifyEvent</a>; read write;<br />
          end;<br />
          <br />
          <a name="TCustomEdit">TCustomEdit</a> = class(<a href="#TWinControl">TWinControl</a>)<br />
          &nbsp;&nbsp;procedure Clear;<br />
          &nbsp;&nbsp;procedure ClearSelection;<br />
          &nbsp;&nbsp;procedure SelectAll;<br />
          &nbsp;&nbsp;property Modified: Boolean; read write;<br />
          &nbsp;&nbsp;property SelLength: Integer; read write;<br />
          &nbsp;&nbsp;property SelStart: Integer; read write;<br />
          &nbsp;&nbsp;property SelText: String; read write;<br />
          &nbsp;&nbsp;property Text: String; read write;<br />
          end;<br />
          <br />
          <a name="TBorderStyle">TBorderStyle</a> = <a href="#TFormBorderStyle">TFormBorderStyle</a>;<br />
          <br />
          <a name="TEditCharCase">TEditCharCase</a> = (ecNormal, ecUpperCase, ecLowerCase);<br />
          <br />
          <a name="TEdit">TEdit</a> = class(<a href="#TCustomEdit">TCustomEdit</a>)<br />
          &nbsp;&nbsp;property Anchors: <a href="#TAnchors">TAnchors</a>; read write;<br />
          &nbsp;&nbsp;property AutoSelect: Boolean; read write;<br />
          &nbsp;&nbsp;property AutoSize: Boolean; read write;<br />
          &nbsp;&nbsp;property BorderStyle: <a href="#TBorderStyle">TBorderStyle</a>; read write;<br />
          &nbsp;&nbsp;property CharCase: <a href="#TEditCharCase">TEditCharCase</a>; read write;<br />
          &nbsp;&nbsp;property Color: <a href="#TColor">TColor</a>; read write;<br />
          &nbsp;&nbsp;property Font: <a href="#TFont">TFont</a>; read write;<br />
          &nbsp;&nbsp;property HideSelection: Boolean; read write;<br />
          &nbsp;&nbsp;property MaxLength: Integer; read write;<br />
          &nbsp;&nbsp;property PasswordChar: Char; read write;<br />
          &nbsp;&nbsp;property ReadOnly: Boolean; read write;<br />
          &nbsp;&nbsp;property Text: String; read write;<br />
          &nbsp;&nbsp;property OnChange: <a href="#TNotifyEvent">TNotifyEvent</a>; read write;<br />
          &nbsp;&nbsp;property OnClick: <a href="#TNotifyEvent">TNotifyEvent</a>; read write;<br />
          &nbsp;&nbsp;property OnDblClick: <a href="#TNotifyEvent">TNotifyEvent</a>; read write;<br />
          &nbsp;&nbsp;property OnKeyDown: <a href="#TKeyEvent">TKeyEvent</a>; read write;<br />
          &nbsp;&nbsp;property OnKeyPress: <a href="#TKeyPressEvent">TKeyPressEvent</a>; read write;<br />
          &nbsp;&nbsp;property OnKeyUp: <a href="#TKeyEvent">TKeyEvent</a>; read write;<br />
          end;<br />
          <br />
          <a name="TNewEdit">TNewEdit</a> = class(<a href="#TEdit">TEdit</a>)<br />
          end;<br />
          <br />
          <a name="TCustomMemo">TCustomMemo</a> = class(<a href="#TCustomEdit">TCustomEdit</a>)<br />
          &nbsp;&nbsp;property Lines: <a href="#TStrings">TStrings</a>; read write;<br />
          end;<br />
          <br />
          <a name="TScrollStyle">TScrollStyle</a> = (ssNone, ssHorizontal, ssVertical, ssBoth);<br />
          <br />
          <a name="TMemo">TMemo</a> = class(<a href="#TCustomMemo">TCustomMemo</a>)<br />
          &nbsp;&nbsp;property Alignment: <a href="#TAlignment">TAlignment</a>; read write;<br />
          &nbsp;&nbsp;property Anchors: <a href="#TAnchors">TAnchors</a>; read write;<br />
          &nbsp;&nbsp;property BorderStyle: <a href="#TBorderStyle">TBorderStyle</a>; read write;<br />
          &nbsp;&nbsp;property Color: <a href="#TColor">TColor</a>; read write;<br />
          &nbsp;&nbsp;property Font: <a href="#TFont">TFont</a>; read write;<br />
          &nbsp;&nbsp;property HideSelection: Boolean; read write;<br />
          &nbsp;&nbsp;property Lines: <a href="#TStrings">TStrings</a>; read write;<br />
          &nbsp;&nbsp;property MaxLength: Integer; read write;<br />
          &nbsp;&nbsp;property ReadOnly: Boolean; read write;<br />
          &nbsp;&nbsp;property ScrollBars: <a href="#TScrollStyle">TScrollStyle</a>; read write;<br />
          &nbsp;&nbsp;property WantReturns: Boolean; read write;<br />
          &nbsp;&nbsp;property WantTabs: Boolean; read write;<br />
          &nbsp;&nbsp;property WordWrap: Boolean; read write;<br />
          &nbsp;&nbsp;property OnChange: <a href="#TNotifyEvent">TNotifyEvent</a>; read write;<br />
          &nbsp;&nbsp;property OnClick: <a href="#TNotifyEvent">TNotifyEvent</a>; read write;<br />
          &nbsp;&nbsp;property OnDblClick: <a href="#TNotifyEvent">TNotifyEvent</a>; read write;<br />
          &nbsp;&nbsp;property OnKeyDown: <a href="#TKeyEvent">TKeyEvent</a>; read write;<br />
          &nbsp;&nbsp;property OnKeyPress: <a href="#TKeyPressEvent">TKeyPressEvent</a>; read write;<br />
          &nbsp;&nbsp;property OnKeyUp: <a href="#TKeyEvent">TKeyEvent</a>; read write;<br />
          end;<br />
          <br />
          <a name="TNewMemo">TNewMemo</a> = class(<a href="#TMemo">TMemo</a>)<br />
          end;<br />
          <br />
          <a name="TCustomComboBox">TCustomComboBox</a> = class(<a href="#TWinControl">TWinControl</a>)<br />
          &nbsp;&nbsp;property DroppedDown: Boolean; read write;<br />
          &nbsp;&nbsp;property Items: <a href="#TStrings">TStrings</a>; read write;<br />
          &nbsp;&nbsp;property ItemIndex: Integer; read write;<br />
          end;<br />
          <br />
          <a name="TComboBoxStyle">TComboBoxStyle</a> = (csDropDown, csSimple, csDropDownList, csOwnerDrawFixed, csOwnerDrawVariable);<br />
          <br />
          <a name="TComboBox">TComboBox</a> = class(<a href="#TCustomComboBox">TCustomComboBox</a>)<br />
          &nbsp;&nbsp;property Anchors: <a href="#TAnchors">TAnchors</a>; read write;<br />
          &nbsp;&nbsp;property Color: <a href="#TColor">TColor</a>; read write;<br />
          &nbsp;&nbsp;property DropDownCount: Integer; read write;<br />
          &nbsp;&nbsp;property Font: <a href="#TFont">TFont</a>; read write;<br />
          &nbsp;&nbsp;property MaxLength: Integer; read write;<br />
          &nbsp;&nbsp;property Sorted: Boolean; read write;<br />
          &nbsp;&nbsp;property Style: <a href="#TComboBoxStyle">TComboBoxStyle</a>; read write;<br />
          &nbsp;&nbsp;property Text: String; read write;<br />
          &nbsp;&nbsp;property OnChange: <a href="#TNotifyEvent">TNotifyEvent</a>; read write;<br />
          &nbsp;&nbsp;property OnClick: <a href="#TNotifyEvent">TNotifyEvent</a>; read write;<br />
          &nbsp;&nbsp;property OnDblClick: <a href="#TNotifyEvent">TNotifyEvent</a>; read write;<br />
          &nbsp;&nbsp;property OnDropDown: <a href="#TNotifyEvent">TNotifyEvent</a>; read write;<br />
          &nbsp;&nbsp;property OnKeyDown: <a href="#TKeyEvent">TKeyEvent</a>; read write;<br />
          &nbsp;&nbsp;property OnKeyPress: <a href="#TKeyPressEvent">TKeyPressEvent</a>; read write;<br />
          &nbsp;&nbsp;property OnKeyUp: <a href="#TKeyEvent">TKeyEvent</a>; read write;<br />
          end;<br />
          <br />
          <a name="TNewComboBox">TNewComboBox</a> = class(<a href="#TComboBox">TComboBox</a>)<br />
          end;<br />
          <br />
          <a name="TButtonControl">TButtonControl</a> = class(<a href="#TWinControl">TWinControl</a>)<br />
          end;<br />
          <br />
          <a name="TButton">TButton</a> = class(<a href="#TButtonControl">TButtonControl</a>)<br />
          &nbsp;&nbsp;property Anchors: <a href="#TAnchors">TAnchors</a>; read write;<br />
          &nbsp;&nbsp;property Cancel: Boolean; read write;<br />
          &nbsp;&nbsp;property Caption: String; read write;<br />
          &nbsp;&nbsp;property Default: Boolean; read write;<br />
          &nbsp;&nbsp;property Font: <a href="#TFont">TFont</a>; read write;<br />
          &nbsp;&nbsp;property ModalResult: Longint; read write;<br />
          &nbsp;&nbsp;property OnClick: <a href="#TNotifyEvent">TNotifyEvent</a>; read write;<br />
          end;<br />
          <br />
          <a name="TNewButton">TNewButton</a> = class(<a href="#TButton">TButton</a>)<br />
          end;<br />
          <br />
          <a name="TCustomCheckBox">TCustomCheckBox</a> = class(<a href="#TButtonControl">TButtonControl</a>)<br />
          end;<br />
          <br />
          <a name="TCheckBoxState">TCheckBoxState</a> = (cbUnchecked, cbChecked, cbGrayed);<br />
          <br />
          <a name="TCheckBox">TCheckBox</a> = class(<a href="#TCustomCheckBox">TCustomCheckBox</a>)<br />
          &nbsp;&nbsp;property Alignment: <a href="#TAlignment">TAlignment</a>; read write;<br />
          &nbsp;&nbsp;property AllowGrayed: Boolean; read write;<br />
          &nbsp;&nbsp;property Anchors: <a href="#TAnchors">TAnchors</a>; read write;<br />
          &nbsp;&nbsp;property Caption: String; read write;<br />
          &nbsp;&nbsp;property Checked: Boolean; read write;<br />
          &nbsp;&nbsp;property Color: <a href="#TColor">TColor</a>; read write;<br />
          &nbsp;&nbsp;property Font: <a href="#TFont">TFont</a>; read write;<br />
          &nbsp;&nbsp;property State: <a href="#TCheckBoxState">TCheckBoxState</a>; read write;<br />
          &nbsp;&nbsp;property OnClick: <a href="#TNotifyEvent">TNotifyEvent</a>; read write;<br />
          end;<br />
          <br />
          <a name="TNewCheckBox">TNewCheckBox</a> = class(<a href="#TCheckBox">TCheckBox</a>)<br />
          end;<br />
          <br />
          <a name="TRadioButton">TRadioButton</a> = class(<a href="#TButtonControl">TButtonControl</a>)<br />
          &nbsp;&nbsp;property Alignment: <a href="#TAlignment">TAlignment</a>; read write;<br />
          &nbsp;&nbsp;property Anchors: <a href="#TAnchors">TAnchors</a>; read write;<br />
          &nbsp;&nbsp;property Caption: String; read write;<br />
          &nbsp;&nbsp;property Checked: Boolean; read write;<br />
          &nbsp;&nbsp;property Color: <a href="#TColor">TColor</a>; read write;<br />
          &nbsp;&nbsp;property Font: <a href="#TFont">TFont</a>; read write;<br />
          &nbsp;&nbsp;property OnClick: <a href="#TNotifyEvent">TNotifyEvent</a>; read write;<br />
          &nbsp;&nbsp;property OnDblClick: <a href="#TNotifyEvent">TNotifyEvent</a>; read write;<br />
          end;<br />
          <br />
          <a name="TNewRadioButton">TNewRadioButton</a> = class(<a href="#TRadioButton">TRadioButton</a>)<br />
          end;<br />
          <br />
          <a name="TSysLinkType">TSysLinkType</a> = (sltURL, sltID);<br />
          <br />
          <a name="TSysLinkEvent">TSysLinkEvent</a> = procedure(Sender: <a href="#TObject">TObject</a>; const Link: string; LinkType: <a href="#TSysLinkType">TSysLinkType</a>);<br />
          <br />
          <a name="TCustomLinkLabel">TCustomLinkLabel</a> = class(<a href="#TWinControl">TWinControl</a>)<br />
          &nbsp;&nbsp;property Alignment: <a href="#TAlignment">TAlignment</a>; read write;<br />
          &nbsp;&nbsp;property AutoSize: Boolean; read write;<br />
          &nbsp;&nbsp;property UseVisualStyle: Boolean; read write;<br />
          &nbsp;&nbsp;property OnLinkClick: <a href="#TSysLinkEvent">TSysLinkEvent</a>; read write;<br />
          end;<br />
          <br />
          <a name="TLinkLabel">TLinkLabel</a> = class(<a href="#TCustomLinkLabel">TCustomLinkLabel</a>)<br />
          &nbsp;&nbsp;property Anchors: <a href="#TAnchors">TAnchors</a>; read write;<br />
          &nbsp;&nbsp;property Caption: String; read write;<br />
          &nbsp;&nbsp;property Color: <a href="#TColor">TColor</a>; read write;<br />
          &nbsp;&nbsp;property Font: <a href="#TFont">TFont</a>; read write;<br />
          end;<br />
          <br />
          <a name="TNewLinkLabel">TNewLinkLabel</a> = class(<a href="#TLinkLabel">TLinkLabel</a>)<br />
          &nbsp;&nbsp;function AdjustHeight: Integer;<br />
          end;<br />
          <br />
          <a name="TCustomListBox">TCustomListBox</a> = class(<a href="#TWinControl">TWinControl</a>)<br />
          &nbsp;&nbsp;property Items: <a href="#TStrings">TStrings</a>; read write;<br />
          &nbsp;&nbsp;property ItemIndex: Integer; read write;<br />
          &nbsp;&nbsp;property SelCount: Integer; read;<br />
          &nbsp;&nbsp;property Selected[Index: Integer]: Boolean; read write;<br />
          end;<br />
          <br />
          <a name="TListBoxStyle">TListBoxStyle</a> = (lbStandard, lbOwnerDrawFixed, lbOwnerDrawVariable);<br />
          <br />
          <a name="TListBox">TListBox</a> = class(<a href="#TCustomListBox">TCustomListBox</a>)<br />
          &nbsp;&nbsp;property Anchors: <a href="#TAnchors">TAnchors</a>; read write;<br />
          &nbsp;&nbsp;property BorderStyle: <a href="#TBorderStyle">TBorderStyle</a>; read write;<br />
          &nbsp;&nbsp;property Color: <a href="#TColor">TColor</a>; read write;<br />
          &nbsp;&nbsp;property Font: <a href="#TFont">TFont</a>; read write;<br />
          &nbsp;&nbsp;property MultiSelect: Boolean; read write;<br />
          &nbsp;&nbsp;property Sorted: Boolean; read write;<br />
          &nbsp;&nbsp;property Style: <a href="#TListBoxStyle">TListBoxStyle</a>; read write;<br />
          &nbsp;&nbsp;property OnClick: <a href="#TNotifyEvent">TNotifyEvent</a>; read write;<br />
          &nbsp;&nbsp;property OnDblClick: <a href="#TNotifyEvent">TNotifyEvent</a>; read write;<br />
          &nbsp;&nbsp;property OnKeyDown: <a href="#TKeyEvent">TKeyEvent</a>; read write;<br />
          &nbsp;&nbsp;property OnKeyPress: <a href="#TKeyPressEvent">TKeyPressEvent</a>; read write;<br />
          &nbsp;&nbsp;property OnKeyUp: <a href="#TKeyEvent">TKeyEvent</a>; read write;<br />
          end;<br />
          <br />
          <a name="TNewListBox">TNewListBox</a> = class(<a href="#TListBox">TListBox</a>)<br />
          end;<br />
          <br />
          <a name="TBevelKind">TBevelKind</a> = (bkNone, bkTile, bkSoft, bkFlat);<br />
          <br />
          <a name="TBevelShape">TBevelShape</a> = (bsBox, bsFrame, bsTopLine, bsBottomLine, bsLeftLine, bsRightLine, bsSpacer);<br />
          <br />
          <a name="TBevelStyle">TBevelStyle</a> = (bsLowered, bsRaised);<br />
          <br />
          <a name="TBevel">TBevel</a> = class(<a href="#TGraphicControl">TGraphicControl</a>)<br />
          &nbsp;&nbsp;property Anchors: <a href="#TAnchors">TAnchors</a>; read write;<br />
          &nbsp;&nbsp;property Shape: <a href="#TBevelShape">TBevelShape</a>; read write;<br />
          &nbsp;&nbsp;property Style: <a href="#TBevelStyle">TBevelStyle</a>; read write;<br />
          end;<br />
          <br />
          <a name="TCustomPanel">TCustomPanel</a> = class(<a href="#TCustomControl">TCustomControl</a>)<br />
          end;<br />
          <br />
          <a name="TPanelBevel">TPanelBevel</a> = (bvNone, bvLowered, bvRaised, bvSpace);<br />
          <br />
          <a name="TBevelWidth">TBevelWidth</a> = Longint;<br />
          <br />
          <a name="TBorderWidth">TBorderWidth</a> = Longint;<br />
          <br />
          <a name="TPanel">TPanel</a> = class(<a href="#TCustomPanel">TCustomPanel</a>)<br />
          &nbsp;&nbsp;property Alignment: <a href="#TAlignment">TAlignment</a>; read write;<br />
          &nbsp;&nbsp;property Anchors: <a href="#TAnchors">TAnchors</a>; read write;<br />
          &nbsp;&nbsp;property BevelInner: <a href="#TPanelBevel">TPanelBevel</a>; read write;<br />
          &nbsp;&nbsp;property BevelKind: <a href="#TBevelKind">TBevelKind</a>; read write;<br />
          &nbsp;&nbsp;property BevelOuter: <a href="#TPanelBevel">TPanelBevel</a>; read write;<br />
          &nbsp;&nbsp;property BevelWidth: <a href="#TBevelWidth">TBevelWidth</a>; read write;<br />
          &nbsp;&nbsp;property BorderWidth: <a href="#TBorderWidth">TBorderWidth</a>; read write;<br />
          &nbsp;&nbsp;property BorderStyle: <a href="#TBorderStyle">TBorderStyle</a>; read write;<br />
          &nbsp;&nbsp;property Caption: String; read write;<br />
          &nbsp;&nbsp;property Color: <a href="#TColor">TColor</a>; read write;<br />
          &nbsp;&nbsp;property Font: <a href="#TFont">TFont</a>; read write;<br />
          &nbsp;&nbsp;property OnClick: <a href="#TNotifyEvent">TNotifyEvent</a>; read write;<br />
          &nbsp;&nbsp;property OnDblClick: <a href="#TNotifyEvent">TNotifyEvent</a>; read write;<br />
          end;<br />
          <br />
          <a name="TNewStaticText">TNewStaticText</a> = class(<a href="#TWinControl">TWinControl</a>)<br />
          &nbsp;&nbsp;function AdjustHeight: Integer;<br />
          &nbsp;&nbsp;property Anchors: <a href="#TAnchors">TAnchors</a>; read write;<br />
          &nbsp;&nbsp;property AutoSize: Boolean; read write;<br />
          &nbsp;&nbsp;property Caption: String; read write;<br />
          &nbsp;&nbsp;property Color: <a href="#TColor">TColor</a>; read write;<br />
          &nbsp;&nbsp;property FocusControl: <a href="#TWinControl">TWinControl</a>; read write;<br />
          &nbsp;&nbsp;property Font: <a href="#TFont">TFont</a>; read write;<br />
          &nbsp;&nbsp;property ForceLTRReading: Boolean; read write;<br />
          &nbsp;&nbsp;property ShowAccelChar: Boolean; read write;<br />
          &nbsp;&nbsp;property WordWrap: Boolean; read write;<br />
          &nbsp;&nbsp;property OnClick: <a href="#TNotifyEvent">TNotifyEvent</a>; read write;<br />
          &nbsp;&nbsp;property OnDblClick: <a href="#TNotifyEvent">TNotifyEvent</a>; read write;<br />
          end;<br />
          <br />
          <a name="TCheckItemOperation">TCheckItemOperation</a> = (coUncheck, coCheck, coCheckWithChildren);<br />
          <br />
          <a name="TNewCheckListBox">TNewCheckListBox</a> = class(<a href="#TCustomListBox">TCustomListBox</a>)<br />
          &nbsp;&nbsp;function AddCheckBox(const ACaption, ASubItem: String; ALevel: Byte; AChecked, AEnabled, AHasInternalChildren, ACheckWhenParentChecked: Boolean; AObject: <a href="#TObject">TObject</a>): Integer;<br />
          &nbsp;&nbsp;function AddGroup(ACaption, ASubItem: String; ALevel: Byte; AObject: <a href="#TObject">TObject</a>): Integer;<br />
          &nbsp;&nbsp;function AddRadioButton(const ACaption, ASubItem: String; ALevel: Byte; AChecked, AEnabled: Boolean; AObject: <a href="#TObject">TObject</a>): Integer;<br />
          &nbsp;&nbsp;function CheckItem(const Index: Integer; const AOperation: <a href="#TCheckItemOperation">TCheckItemOperation</a>): Boolean;<br />
          &nbsp;&nbsp;property Anchors: <a href="#TAnchors">TAnchors</a>; read write;<br />
          &nbsp;&nbsp;property Checked[Index: Integer]: Boolean; read write;<br />
          &nbsp;&nbsp;property State[Index: Integer]: <a href="#TCheckBoxState">TCheckBoxState</a>; read write;<br />
          &nbsp;&nbsp;property ItemCaption[Index: Integer]: String; read write;<br />
          &nbsp;&nbsp;property ItemEnabled[Index: Integer]: Boolean; read write;<br />
          &nbsp;&nbsp;property ItemFontStyle[Index: Integer]: <a href="#TFontStyles">TFontStyles</a>; read write;<br />
          &nbsp;&nbsp;property ItemLevel[Index: Integer]: Byte; read;<br />
          &nbsp;&nbsp;property ItemObject[Index: Integer]: <a href="#TObject">TObject</a>; read write;<br />
          &nbsp;&nbsp;property ItemSubItem[Index: Integer]: String; read write;<br />
          &nbsp;&nbsp;property SubItemFontStyle[Index: Integer]: <a href="#TFontStyles">TFontStyles</a>; read write;<br />
          &nbsp;&nbsp;property Flat: Boolean; read write;<br />
          &nbsp;&nbsp;property MinItemHeight: Integer; read write;<br />
          &nbsp;&nbsp;property Offset: Integer; read write;<br />
          &nbsp;&nbsp;property OnClickCheck: <a href="#TNotifyEvent">TNotifyEvent</a>; read write;<br />
          &nbsp;&nbsp;property BorderStyle: <a href="#TBorderStyle">TBorderStyle</a>; read write;<br />
          &nbsp;&nbsp;property Color: <a href="#TColor">TColor</a>; read write;<br />
          &nbsp;&nbsp;property Font: <a href="#TFont">TFont</a>; read write;<br />
          &nbsp;&nbsp;property Sorted: Boolean; read write;<br />
          &nbsp;&nbsp;property OnClick: <a href="#TNotifyEvent">TNotifyEvent</a>; read write;<br />
          &nbsp;&nbsp;property OnDblClick: <a href="#TNotifyEvent">TNotifyEvent</a>; read write;<br />
          &nbsp;&nbsp;property OnKeyDown: <a href="#TKeyEvent">TKeyEvent</a>; read write;<br />
          &nbsp;&nbsp;property OnKeyPress: <a href="#TKeyPressEvent">TKeyPressEvent</a>; read write;<br />
          &nbsp;&nbsp;property OnKeyUp: <a href="#TKeyEvent">TKeyEvent</a>; read write;<br />
          &nbsp;&nbsp;property ShowLines: Boolean; read write;<br />
          &nbsp;&nbsp;property WantTabs: Boolean; read write;<br />
          &nbsp;&nbsp;property RequireRadioSelection: Boolean; read write;<br />
          end;<br />
          <br />
          <a name="TNewProgressBarState">TNewProgressBarState</a> = (npbsNormal, npbsError, npbsPaused);<br />
          <br />
          <a name="TNewProgressBarStyle">TNewProgressBarStyle</a> = (npbstNormal, npbstMarquee);<br />
          <br />
          <a name="TNewProgressBar">TNewProgressBar</a> = class(<a href="#TWinControl">TWinControl</a>)<br />
          &nbsp;&nbsp;property Anchors: <a href="#TAnchors">TAnchors</a>; read write;<br />
          &nbsp;&nbsp;property Min: Longint; read write;<br />
          &nbsp;&nbsp;property Max: Longint; read write;<br />
          &nbsp;&nbsp;property Position: Longint; read write;<br />
          &nbsp;&nbsp;property State: <a href="#TNewProgressBarState">TNewProgressBarState</a>; read write;<br />
          &nbsp;&nbsp;property Style: <a href="#TNewProgressBarStyle">TNewProgressBarStyle</a>; read write;<br />
          &nbsp;&nbsp;property Visible: Boolean; read write;<br />
          end;<br />
          <br />
          <a name="TRichEditViewer">TRichEditViewer</a> = class(<a href="#TMemo">TMemo</a>)<br />
          &nbsp;&nbsp;property Anchors: <a href="#TAnchors">TAnchors</a>; read write;<br />
          &nbsp;&nbsp;property BevelKind: <a href="#TBevelKind">TBevelKind</a>; read write;<br />
          &nbsp;&nbsp;property BorderStyle: <a href="#TBorderStyle">TBorderStyle</a>; read write;<br />
          &nbsp;&nbsp;property RTFText: AnsiString; write;<br />
          &nbsp;&nbsp;property UseRichEdit: Boolean; read write;<br />
          end;<br />
          <br />
          <a name="TPasswordEdit">TPasswordEdit</a> = class(<a href="#TCustomEdit">TCustomEdit</a>)<br />
          &nbsp;&nbsp;property Anchors: <a href="#TAnchors">TAnchors</a>; read write;<br />
          &nbsp;&nbsp;property AutoSelect: Boolean; read write;<br />
          &nbsp;&nbsp;property AutoSize: Boolean; read write;<br />
          &nbsp;&nbsp;property BorderStyle: <a href="#TBorderStyle">TBorderStyle</a>; read write;<br />
          &nbsp;&nbsp;property Color: <a href="#TColor">TColor</a>; read write;<br />
          &nbsp;&nbsp;property Font: <a href="#TFont">TFont</a>; read write;<br />
          &nbsp;&nbsp;property HideSelection: Boolean; read write;<br />
          &nbsp;&nbsp;property MaxLength: Integer; read write;<br />
          &nbsp;&nbsp;property Password: Boolean; read write;<br />
          &nbsp;&nbsp;property ReadOnly: Boolean; read write;<br />
          &nbsp;&nbsp;property Text: String; read write;<br />
          &nbsp;&nbsp;property OnChange: <a href="#TNotifyEvent">TNotifyEvent</a>; read write;<br />
          &nbsp;&nbsp;property OnClick: <a href="#TNotifyEvent">TNotifyEvent</a>; read write;<br />
          &nbsp;&nbsp;property OnDblClick: <a href="#TNotifyEvent">TNotifyEvent</a>; read write;<br />
          &nbsp;&nbsp;property OnKeyDown: <a href="#TKeyEvent">TKeyEvent</a>; read write;<br />
          &nbsp;&nbsp;property OnKeyPress: <a href="#TKeyPressEvent">TKeyPressEvent</a>; read write;<br />
          &nbsp;&nbsp;property OnKeyUp: <a href="#TKeyEvent">TKeyEvent</a>; read write;<br />
          end;<br />
          <br />
          <a name="TCustomFolderTreeView">TCustomFolderTreeView</a> = class(<a href="#TWinControl">TWinControl</a>)<br />
          &nbsp;&nbsp;procedure ChangeDirectory(const Value: String; const CreateNewItems: Boolean);<br />
          &nbsp;&nbsp;procedure CreateNewDirectory(const ADefaultName: String);<br />
          &nbsp;&nbsp;property: Directory: String; read write;<br />
          end;<br />
          <br />
          <a name="TFolderRenameEvent">TFolderRenameEvent</a> = procedure(Sender: <a href="#TCustomFolderTreeView">TCustomFolderTreeView</a>; var NewName: String; var Accept: Boolean);<br />
          <br />
          <a name="TFolderTreeView">TFolderTreeView</a> = class(<a href="#TCustomFolderTreeView">TCustomFolderTreeView</a>)<br />
          &nbsp;&nbsp;property Anchors: <a href="#TAnchors">TAnchors</a>; read write;<br />
          &nbsp;&nbsp;property OnChange: <a href="#TNotifyEvent">TNotifyEvent</a>; read write;<br />
          &nbsp;&nbsp;property OnRename: <a href="#TFolderRenameEvent">TFolderRenameEvent</a>; read write;<br />
          end;<br />
          <br />
          <a name="TStartMenuFolderTreeView">TStartMenuFolderTreeView</a> = class(<a href="#TCustomFolderTreeView">TCustomFolderTreeView</a>)<br />
          &nbsp;&nbsp;procedure SetPaths(const AUserPrograms, ACommonPrograms, AUserStartup, ACommonStartup: String);<br />
          &nbsp;&nbsp;property Anchors: <a href="#TAnchors">TAnchors</a>; read write;<br />
          &nbsp;&nbsp;property OnChange: <a href="#TNotifyEvent">TNotifyEvent</a>; read write;<br />
          &nbsp;&nbsp;property OnRename: <a href="#TFolderRenameEvent">TFolderRenameEvent</a>; read write;<br />
          end;<br />
          <br />
          <a name="TBitmapImage">TBitmapImage</a> = class(<a href="#TGraphicControl">TGraphicControl</a>)<br />
          &nbsp;&nbsp;property Anchors: <a href="#TAnchors">TAnchors</a>; read write;<br />
          &nbsp;&nbsp;property AutoSize: Boolean; read write;<br />
          &nbsp;&nbsp;property BackColor: <a href="#TColor">TColor</a>; read write;<br />
          &nbsp;&nbsp;property Center: Boolean; read write;<br />
          &nbsp;&nbsp;property Bitmap: <a href="#TBitmap">TBitmap</a>; read write;<br />
          &nbsp;&nbsp;property ReplaceColor: <a href="#TColor">TColor</a>; read write;<br />
          &nbsp;&nbsp;property ReplaceWithColor: <a href="#TColor">TColor</a>; read write;<br />
          &nbsp;&nbsp;property Stretch: Boolean; read write;<br />
          &nbsp;&nbsp;property OnClick: <a href="#TNotifyEvent">TNotifyEvent</a>; read write;<br />
          &nbsp;&nbsp;property OnDblClick: <a href="#TNotifyEvent">TNotifyEvent</a>; read write;<br />
          end;<br />
          <br />
          <a name="TNewNotebook">TNewNotebook</a> = class(<a href="#TWinControl">TWinControl</a>)<br />
          &nbsp;&nbsp;function FindNextPage(CurPage: <a href="#TNewNotebookPage">TNewNotebookPage</a>; GoForward: Boolean): <a href="#TNewNotebookPage">TNewNotebookPage</a>;<br />
          &nbsp;&nbsp;property Anchors: <a href="#TAnchors">TAnchors</a>; read write;<br />
          &nbsp;&nbsp;property PageCount: Integer; read write;<br />
          &nbsp;&nbsp;property Pages[Index: Integer]: <a href="#TNewNotebookPage">TNewNotebookPage</a>; read;<br />
          &nbsp;&nbsp;property ActivePage: <a href="#TNewNotebookPage">TNewNotebookPage</a>; read write;<br />
          end;<br />
          <br />
          <a name="TNewNotebookPage">TNewNotebookPage</a> = class(<a href="#TCustomControl">TCustomControl</a>)<br />
          &nbsp;&nbsp;property Color: <a href="#TColor">TColor</a>; read write;<br />
          &nbsp;&nbsp;property Notebook: <a href="#TNewNotebook">TNewNotebook</a>; read write;<br />
          &nbsp;&nbsp;property PageIndex: Integer; read write;<br />
          end;<br />
          <br />
          <a name="TWizardPageNotifyEvent">TWizardPageNotifyEvent</a> = procedure(Sender: <a href="#TWizardPage">TWizardPage</a>);<br />
          <a name="TWizardPageButtonEvent">TWizardPageButtonEvent</a> = function(Sender: <a href="#TWizardPage">TWizardPage</a>): Boolean;<br />
          <a name="TWizardPageCancelEvent">TWizardPageCancelEvent</a> = procedure(Sender: <a href="#TWizardPage">TWizardPage</a>; var ACancel, AConfirm: Boolean);<br />
          <a name="TWizardPageShouldSkipEvent">TWizardPageShouldSkipEvent</a> = function(Sender: <a href="#TWizardPage">TWizardPage</a>): Boolean;<br />
          <br />
          <a name="TWizardPage">TWizardPage</a> = class(<a href="#TComponent">TComponent</a>)<br />
          &nbsp;&nbsp;property ID: Integer; read;<br />
          &nbsp;&nbsp;property Caption: String; read write;<br />
          &nbsp;&nbsp;property Description: String; read write;<br />
          &nbsp;&nbsp;property Surface: <a href="#TNewNotebookPage">TNewNotebookPage</a>; read;<br />
          &nbsp;&nbsp;property SurfaceColor: <a href="#TColor">TColor</a>; read;<br />
          &nbsp;&nbsp;property SurfaceHeight: Integer; read;<br />
          &nbsp;&nbsp;property SurfaceWidth: Integer; read;<br />
          &nbsp;&nbsp;property OnActivate: <a href="#TWizardPageNotifyEvent">TWizardPageNotifyEvent</a>; read write;<br />
          &nbsp;&nbsp;property OnBackButtonClick: <a href="#TWizardPageButtonEvent">TWizardPageButtonEvent</a>; read write;<br />
          &nbsp;&nbsp;property OnCancelButtonClick: <a href="#TWizardPageCancelEvent">TWizardPageCancelEvent</a>; read write;<br />
          &nbsp;&nbsp;property OnNextButtonClick: <a href="#TWizardPageButtonEvent">TWizardPageButtonEvent</a>; read write;<br />
          &nbsp;&nbsp;property OnShouldSkipPage: <a href="#TWizardPageShouldSkipEvent">TWizardPageShouldSkipEvent</a>; read write;<br />
          end;<br />
          <br />
          <a name="TInputQueryWizardPage">TInputQueryWizardPage</a> = class(<a href="#TWizardPage">TWizardPage</a>)<br />
          &nbsp;&nbsp;function Add(const APrompt: String; const APassword: Boolean): Integer;<br />
          &nbsp;&nbsp;property Edits[Index: Integer]: <a href="#TPasswordEdit">TPasswordEdit</a>; read;<br />
          &nbsp;&nbsp;property PromptLabels[Index: Integer]: <a href="#TNewStaticText">TNewStaticText</a>; read;<br />
          &nbsp;&nbsp;property SubCaptionLabel: <a href="#TNewStaticText">TNewStaticText</a>; read;<br />
          &nbsp;&nbsp;property Values[Index: Integer]: String; read write;<br />
          end;<br />
          <br />
          <a name="TInputOptionWizardPage">TInputOptionWizardPage</a> = class(<a href="#TWizardPage">TWizardPage</a>)<br />
          &nbsp;&nbsp;function Add(const ACaption: String): Integer;<br />
          &nbsp;&nbsp;function AddEx(const ACaption: String; const ALevel: Byte; const AExclusive: Boolean): Integer;<br />
          &nbsp;&nbsp;property CheckListBox: <a href="#TNewCheckListBox">TNewCheckListBox</a>; read;<br />
          &nbsp;&nbsp;property SelectedValueIndex: Integer; read write;<br />
          &nbsp;&nbsp;property SubCaptionLabel: <a href="#TNewStaticText">TNewStaticText</a>; read;<br />
          &nbsp;&nbsp;property Values[Index: Integer]: Boolean; read write;<br />
          end;<br />
          <br />
          <a name="TInputDirWizardPage">TInputDirWizardPage</a> = class(<a href="#TWizardPage">TWizardPage</a>)<br />
          &nbsp;&nbsp;function Add(const APrompt: String): Integer;<br />
          &nbsp;&nbsp;property Buttons[Index: Integer]: <a href="#TNewButton">TNewButton</a>; read;<br />
          &nbsp;&nbsp;property Edits[Index: Integer]: <a href="#TEdit">TEdit</a>; read;<br />
          &nbsp;&nbsp;property NewFolderName: String; read write;<br />
          &nbsp;&nbsp;property PromptLabels[Index: Integer]: <a href="#TNewStaticText">TNewStaticText</a>; read;<br />
          &nbsp;&nbsp;property SubCaptionLabel: <a href="#TNewStaticText">TNewStaticText</a>; read;<br />
          &nbsp;&nbsp;property Values[Index: Integer]: String; read write;<br />
          end;<br />
          <br />
          <a name="TInputFileWizardPage">TInputFileWizardPage</a> = class(<a href="#TWizardPage">TWizardPage</a>)<br />
          &nbsp;&nbsp;function Add(const APrompt, AFilter, ADefaultExtension: String): Integer;<br />
          &nbsp;&nbsp;property Buttons[Index: Integer]: <a href="#TNewButton">TNewButton</a>; read;<br />
          &nbsp;&nbsp;property Edits[Index: Integer]: <a href="#TEdit">TEdit</a>; read;<br />
          &nbsp;&nbsp;property PromptLabels[Index: Integer]: <a href="#TNewStaticText">TNewStaticText</a>; read;<br />
          &nbsp;&nbsp;property SubCaptionLabel: <a href="#TNewStaticText">TNewStaticText</a>; read;<br />
          &nbsp;&nbsp;property Values[Index: Integer]: String; read write;<br />
          &nbsp;&nbsp;property IsSaveButton[Index: Integer]: Boolean; read write;<br />
          end;<br />
          <br />
          <a name="TOutputMsgWizardPage">TOutputMsgWizardPage</a> = class(<a href="#TWizardPage">TWizardPage</a>)<br />
          &nbsp;&nbsp;property MsgLabel: <a href="#TNewStaticText">TNewStaticText</a>; read;<br />
          end;<br />
          <br />
          <a name="TOutputMsgMemoWizardPage">TOutputMsgMemoWizardPage</a> = class(<a href="#TWizardPage">TWizardPage</a>)<br />
          &nbsp;&nbsp;property RichEditViewer: <a href="#TRichEditViewer">TRichEditViewer</a>; read;<br />
          &nbsp;&nbsp;property SubCaptionLabel: <a href="#TNewStaticText">TNewStaticText</a>; read;<br />
          end;<br />
          <br />
          <a name="TOutputProgressWizardPage">TOutputProgressWizardPage</a> = class(<a href="#TWizardPage">TWizardPage</a>)<br />
          &nbsp;&nbsp;procedure Hide;<br />
          &nbsp;&nbsp;property Msg1Label: <a href="#TNewStaticText">TNewStaticText</a>; read;<br />
          &nbsp;&nbsp;property Msg2Label: <a href="#TNewStaticText">TNewStaticText</a>; read;<br />
          &nbsp;&nbsp;property ProgressBar: <a href="#TNewProgressBar">TNewProgressBar</a>; read;<br />
          &nbsp;&nbsp;procedure SetProgress(const Position, Max: Longint);<br />
          &nbsp;&nbsp;procedure SetText(const Msg1, Msg2: String);<br />
          &nbsp;&nbsp;procedure Show;<br />
          end;<br />
          <br />
          <a name="TOutputMarqueeProgressWizardPage">TOutputMarqueeProgressWizardPage</a> = class(<a href="#TOutputProgressWizardPage">TOutputProgressWizardPage</a>)<br />
          &nbsp;&nbsp;procedure Animate;<br />
          end;<br />
          <br />
          <a name="TDownloadWizardPage">TDownloadWizardPage</a> = class(<a href="#TOutputProgressWizardPage">TOutputProgressWizardPage</a>)<br />
          &nbsp;&nbsp;property AbortButton: <a href="#TNewButton">TNewButton</a>; read;<br />
          &nbsp;&nbsp;property AbortedByUser: Boolean; read;<br />
          &nbsp;&nbsp;function Add(const Url, BaseName, RequiredSHA256OfFile: String): Integer;<br />
          &nbsp;&nbsp;function AddWithISSigVerify(const Url, ISSigUrl, BaseName: String; const AllowedKeysRuntimeIDs: <a href="#TStringList">TStringList</a>): Integer;<br />
          &nbsp;&nbsp;function AddEx(const Url, BaseName, RequiredSHA256OfFile, UserName, Password: String): Integer;<br />
          &nbsp;&nbsp;function AddExWithISSigVerify(const Url, ISSigUrl, BaseName, UserName, Password: String; const AllowedKeysRuntimeIDs: <a href="#TStringList">TStringList</a>: Integer;<br />
          &nbsp;&nbsp;procedure Clear;<br />
          &nbsp;&nbsp;function Download: Int64;<br />
          &nbsp;&nbsp;property LastBaseNameOrUrl: String; read;<br />
          &nbsp;&nbsp;property ShowBaseNameInsteadOfUrl: Boolean; read write;<br />
          end;<br />
          <br />
          <a name="TExtractionWizardPage">TExtractionWizardPage</a> = class(<a href="#TOutputProgressWizardPage">TOutputProgressWizardPage</a>)<br />
          &nbsp;&nbsp;property AbortButton: <a href="#TNewButton">TNewButton</a>; read;<br />
          &nbsp;&nbsp;property AbortedByUser: Boolean; read;<br />
          &nbsp;&nbsp;function Add(const ArchiveFileName, DestDir: String; const FullPaths: Boolean): Integer;<br />
          &nbsp;&nbsp;function AddEx(const ArchiveFileName, DestDir, Password: String; const FullPaths: Boolean): Integer;<br />
          &nbsp;&nbsp;procedure Clear;<br />
          &nbsp;&nbsp;procedure Extract;<br />
          &nbsp;&nbsp;property ShowArchiveInsteadOfFile: Boolean; read write;<br />
          end;<br />
          <br />
          <a name="TUIStateForm">TUIStateForm</a> = class(<a href="#TForm">TForm</a>)<br />
          end;<br />
          <br />
          <a name="TSetupForm">TSetupForm</a> = class(<a href="#TUIStateForm">TUIStateForm</a>)<br />
          &nbsp;&nbsp;function CalculateButtonWidth(const ButtonCaptions: array of String): Integer;<br />
          &nbsp;&nbsp;function ShouldSizeX: Boolean;<br />
          &nbsp;&nbsp;function ShouldSizeY: Boolean;<br />
          &nbsp;&nbsp;procedure FlipSizeAndCenterIfNeeded(const ACenterInsideControl: Boolean; const CenterInsideControlCtl: <a href="#TWinControl">TWinControl</a>; const CenterInsideControlInsideClientArea: Boolean);<br />
          &nbsp;&nbsp;property ControlsFlipped: Boolean; read;<br />
          &nbsp;&nbsp;property FlipControlsOnShow: Boolean; read write;<br />
          &nbsp;&nbsp;property KeepSizeY: Boolean; read; write;<br />
          &nbsp;&nbsp;property RightToLeft: Boolean; read;<br />
          &nbsp;&nbsp;property SizeAndCenterOnShow: Boolean; read write;<br />
          end;<br />
          <br />
          <a name="TWizardForm">TWizardForm</a> = class(<a href="#TSetupForm">TSetupForm</a>)<br />
          &nbsp;&nbsp;property CancelButton: <a href="#TNewButton">TNewButton</a>; read;<br />
          &nbsp;&nbsp;property NextButton: <a href="#TNewButton">TNewButton</a>; read;<br />
          &nbsp;&nbsp;property BackButton: <a href="#TNewButton">TNewButton</a>; read;<br />
          &nbsp;&nbsp;property OuterNotebook: TNotebook; read;<br />
          &nbsp;&nbsp;property InnerNotebook: TNotebook; read;<br />
          &nbsp;&nbsp;property WelcomePage: <a href="#TNewNotebookPage">TNewNotebookPage</a>; read;<br />
          &nbsp;&nbsp;property InnerPage: <a href="#TNewNotebookPage">TNewNotebookPage</a>; read;<br />
          &nbsp;&nbsp;property FinishedPage: <a href="#TNewNotebookPage">TNewNotebookPage</a>; read;<br />
          &nbsp;&nbsp;property LicensePage: <a href="#TNewNotebookPage">TNewNotebookPage</a>; read;<br />
          &nbsp;&nbsp;property PasswordPage: <a href="#TNewNotebookPage">TNewNotebookPage</a>; read;<br />
          &nbsp;&nbsp;property InfoBeforePage: <a href="#TNewNotebookPage">TNewNotebookPage</a>; read;<br />
          &nbsp;&nbsp;property UserInfoPage: <a href="#TNewNotebookPage">TNewNotebookPage</a>; read;<br />
          &nbsp;&nbsp;property SelectDirPage: <a href="#TNewNotebookPage">TNewNotebookPage</a>; read;<br />
          &nbsp;&nbsp;property SelectComponentsPage: <a href="#TNewNotebookPage">TNewNotebookPage</a>; read;<br />
          &nbsp;&nbsp;property SelectProgramGroupPage: <a href="#TNewNotebookPage">TNewNotebookPage</a>; read;<br />
          &nbsp;&nbsp;property SelectTasksPage: <a href="#TNewNotebookPage">TNewNotebookPage</a>; read;<br />
          &nbsp;&nbsp;property ReadyPage: <a href="#TNewNotebookPage">TNewNotebookPage</a>; read;<br />
          &nbsp;&nbsp;property PreparingPage: <a href="#TNewNotebookPage">TNewNotebookPage</a>; read;<br />
          &nbsp;&nbsp;property InstallingPage: <a href="#TNewNotebookPage">TNewNotebookPage</a>; read;<br />
          &nbsp;&nbsp;property InfoAfterPage: <a href="#TNewNotebookPage">TNewNotebookPage</a>; read;<br />
          &nbsp;&nbsp;property DiskSpaceLabel: <a href="#TNewStaticText">TNewStaticText</a>; read;<br />
          &nbsp;&nbsp;property DirEdit: <a href="#TEdit">TEdit</a>; read;<br />
          &nbsp;&nbsp;property GroupEdit: <a href="#TNewEdit">TNewEdit</a>; read;<br />
          &nbsp;&nbsp;property NoIconsCheck: <a href="#TNewCheckBox">TNewCheckBox</a>; read;<br />
          &nbsp;&nbsp;property PasswordLabel: <a href="#TNewStaticText">TNewStaticText</a>; read;<br />
          &nbsp;&nbsp;property PasswordEdit: <a href="#TPasswordEdit">TPasswordEdit</a>; read;<br />
          &nbsp;&nbsp;property PasswordEditLabel: <a href="#TNewStaticText">TNewStaticText</a>; read;<br />
          &nbsp;&nbsp;property ReadyMemo: <a href="#TNewMemo">TNewMemo</a>; read;<br />
          &nbsp;&nbsp;property TypesCombo: <a href="#TNewComboBox">TNewComboBox</a>; read;<br />
          &nbsp;&nbsp;property Bevel: <a href="#TBevel">TBevel</a>; read;<br />
          &nbsp;&nbsp;property WizardBitmapImage: <a href="#TBitmapImage">TBitmapImage</a>; read;<br />
          &nbsp;&nbsp;property WelcomeLabel1: <a href="#TNewStaticText">TNewStaticText</a>; read;<br />
          &nbsp;&nbsp;property InfoBeforeMemo: <a href="#TRichEditViewer">TRichEditViewer</a>; read;<br />
          &nbsp;&nbsp;property InfoBeforeClickLabel: <a href="#TNewStaticText">TNewStaticText</a>; read;<br />
          &nbsp;&nbsp;property MainPanel: <a href="#TPanel">TPanel</a>; read;<br />
          &nbsp;&nbsp;property Bevel1: <a href="#TBevel">TBevel</a>; read;<br />
          &nbsp;&nbsp;property PageNameLabel: <a href="#TNewStaticText">TNewStaticText</a>; read;<br />
          &nbsp;&nbsp;property PageDescriptionLabel: <a href="#TNewStaticText">TNewStaticText</a>; read;<br />
          &nbsp;&nbsp;property WizardSmallBitmapImage: <a href="#TBitmapImage">TBitmapImage</a>; read;<br />
          &nbsp;&nbsp;property ReadyLabel: <a href="#TNewStaticText">TNewStaticText</a>; read;<br />
          &nbsp;&nbsp;property FinishedLabel: <a href="#TNewStaticText">TNewStaticText</a>; read;<br />
          &nbsp;&nbsp;property YesRadio: <a href="#TNewRadioButton">TNewRadioButton</a>; read;<br />
          &nbsp;&nbsp;property NoRadio: <a href="#TNewRadioButton">TNewRadioButton</a>; read;<br />
          &nbsp;&nbsp;property WizardBitmapImage2: <a href="#TBitmapImage">TBitmapImage</a>; read;<br />
          &nbsp;&nbsp;property WelcomeLabel2: <a href="#TNewStaticText">TNewStaticText</a>; read;<br />
          &nbsp;&nbsp;property LicenseLabel1: <a href="#TNewStaticText">TNewStaticText</a>; read;<br />
          &nbsp;&nbsp;property LicenseMemo: <a href="#TRichEditViewer">TRichEditViewer</a>; read;<br />
          &nbsp;&nbsp;property InfoAfterMemo: <a href="#TRichEditViewer">TRichEditViewer</a>; read;<br />
          &nbsp;&nbsp;property InfoAfterClickLabel: <a href="#TNewStaticText">TNewStaticText</a>; read;<br />
          &nbsp;&nbsp;property ComponentsList: <a href="#TNewCheckListBox">TNewCheckListBox</a>; read;<br />
          &nbsp;&nbsp;property ComponentsDiskSpaceLabel: <a href="#TNewStaticText">TNewStaticText</a>; read;<br />
          &nbsp;&nbsp;property BeveledLabel: <a href="#TNewStaticText">TNewStaticText</a>; read;<br />
          &nbsp;&nbsp;property StatusLabel: <a href="#TNewStaticText">TNewStaticText</a>; read;<br />
          &nbsp;&nbsp;property FilenameLabel: <a href="#TNewStaticText">TNewStaticText</a>; read;<br />
          &nbsp;&nbsp;property ProgressGauge: <a href="#TNewProgressBar">TNewProgressBar</a>; read;<br />
          &nbsp;&nbsp;property SelectDirLabel: <a href="#TNewStaticText">TNewStaticText</a>; read;<br />
          &nbsp;&nbsp;property SelectStartMenuFolderLabel: <a href="#TNewStaticText">TNewStaticText</a>; read;<br />
          &nbsp;&nbsp;property SelectComponentsLabel: <a href="#TNewStaticText">TNewStaticText</a>; read;<br />
          &nbsp;&nbsp;property SelectTasksLabel: <a href="#TNewStaticText">TNewStaticText</a>; read;<br />
          &nbsp;&nbsp;property LicenseAcceptedRadio: <a href="#TNewRadioButton">TNewRadioButton</a>; read;<br />
          &nbsp;&nbsp;property LicenseNotAcceptedRadio: <a href="#TNewRadioButton">TNewRadioButton</a>; read;<br />
          &nbsp;&nbsp;property UserInfoNameLabel: <a href="#TNewStaticText">TNewStaticText</a>; read;<br />
          &nbsp;&nbsp;property UserInfoNameEdit: <a href="#TNewEdit">TNewEdit</a>; read;<br />
          &nbsp;&nbsp;property UserInfoOrgLabel: <a href="#TNewStaticText">TNewStaticText</a>; read;<br />
          &nbsp;&nbsp;property UserInfoOrgEdit: <a href="#TNewEdit">TNewEdit</a>; read;<br />
          &nbsp;&nbsp;property PreparingErrorBitmapImage: <a href="#TBitmapImage">TBitmapImage</a>; read;<br />
          &nbsp;&nbsp;property PreparingLabel: <a href="#TNewStaticText">TNewStaticText</a>; read;<br />
          &nbsp;&nbsp;property FinishedHeadingLabel: <a href="#TNewStaticText">TNewStaticText</a>; read;<br />
          &nbsp;&nbsp;property UserInfoSerialLabel: <a href="#TNewStaticText">TNewStaticText</a>; read;<br />
          &nbsp;&nbsp;property UserInfoSerialEdit: <a href="#TNewEdit">TNewEdit</a>; read;<br />
          &nbsp;&nbsp;property TasksList: <a href="#TNewCheckListBox">TNewCheckListBox</a>; read;<br />
          &nbsp;&nbsp;property RunList: <a href="#TNewCheckListBox">TNewCheckListBox</a>; read;<br />
          &nbsp;&nbsp;property DirBrowseButton: <a href="#TNewButton">TNewButton</a>; read;<br />
          &nbsp;&nbsp;property GroupBrowseButton: <a href="#TNewButton">TNewButton</a>; read;<br />
          &nbsp;&nbsp;property SelectDirBitmapImage: <a href="#TBitmapImage">TBitmapImage</a>; read;<br />
          &nbsp;&nbsp;property SelectGroupBitmapImage: <a href="#TBitmapImage">TBitmapImage</a>; read;<br />
          &nbsp;&nbsp;property SelectDirBrowseLabel: <a href="#TNewStaticText">TNewStaticText</a>; read;<br />
          &nbsp;&nbsp;property SelectStartMenuFolderBrowseLabel: <a href="#TNewStaticText">TNewStaticText</a>; read;<br />
          &nbsp;&nbsp;property PreparingYesRadio: <a href="#TNewRadioButton">TNewRadioButton</a>; read;<br />
          &nbsp;&nbsp;property PreparingNoRadio: <a href="#TNewRadioButton">TNewRadioButton</a>; read;<br />
          &nbsp;&nbsp;property PreparingMemo: <a href="#TNewMemo">TNewMemo</a>; read;<br />
          &nbsp;&nbsp;property CurPageID: Integer; read;<br />
          &nbsp;&nbsp;function AdjustLabelHeight(ALabel: <a href="#TNewStaticText">TNewStaticText</a>): Integer;<br />
          &nbsp;&nbsp;function AdjustLinkLabelHeight(ALinkLabel: <a href="#TNewLinkLabel">TNewLinkLabel</a>): Integer;<br />
          &nbsp;&nbsp;procedure IncTopDecHeight(AControl: <a href="#TControl">TControl</a>; Amount: Integer);<br />
          &nbsp;&nbsp;property PrevAppDir: String; read;<br />
          end;<br />
          <br />
          <a name="TUninstallProgressForm">TUninstallProgressForm</a> = class(<a href="#TSetupForm">TSetupForm</a>)<br />
          &nbsp;&nbsp;property OuterNotebook: <a href="#TNewNotebook">TNewNotebook</a>; read;<br />
          &nbsp;&nbsp;property InnerPage: <a href="#TNewNotebookPage">TNewNotebookPage</a>; read;<br />
          &nbsp;&nbsp;property InnerNotebook: <a href="#TNewNotebook">TNewNotebook</a>; read;<br />
          &nbsp;&nbsp;property InstallingPage: <a href="#TNewNotebookPage">TNewNotebookPage</a>; read;<br />
          &nbsp;&nbsp;property MainPanel: <a href="#TPanel">TPanel</a>; read;<br />
          &nbsp;&nbsp;property PageNameLabel: <a href="#TNewStaticText">TNewStaticText</a>; read;<br />
          &nbsp;&nbsp;property PageDescriptionLabel: <a href="#TNewStaticText">TNewStaticText</a>; read;<br />
          &nbsp;&nbsp;property WizardSmallBitmapImage: <a href="#TBitmapImage">TBitmapImage</a>; read;<br />
          &nbsp;&nbsp;property Bevel1: <a href="#TBevel">TBevel</a>; read;<br />
          &nbsp;&nbsp;property StatusLabel: <a href="#TNewStaticText">TNewStaticText</a>; read;<br />
          &nbsp;&nbsp;property ProgressBar: <a href="#TNewProgressBar">TNewProgressBar</a>; read;<br />
          &nbsp;&nbsp;property BeveledLabel: <a href="#TNewStaticText">TNewStaticText</a>; read;<br />
          &nbsp;&nbsp;property Bevel: <a href="#TBevel">TBevel</a>; read;<br />
          &nbsp;&nbsp;property CancelButton: <a href="#TNewButton">TNewButton</a>; read;<br />
          end;<br />
        </code></p>
      <h2 class="heading">См. также:</h2>
      <p class="null" style="text-indent: 0;">
        <code>
          function <a href="topic_isxfunc_createcustomform.htm">CreateCustomForm</a>: TSetupForm;</tt><br />
          function <a href="topic_isxfunc_createcustompage.htm">CreateCustomPage</a>(const AfterID: Integer; const ACaption, ADescription: String): TWizardPage;<br />
          function <a href="topic_isxfunc_createdownloadpage.htm">CreateDownloadPage</a>(const ACaption, ADescription: String; const OnDownloadProgress: TOnDownloadProgress): TDownloadWizardPage;<br />
          function <a href="topic_isxfunc_createinputdirpage.htm">CreateInputDirPage</a>(const AfterID: Integer; const ACaption, ADescription, ASubCaption: String; AAppendDir: Boolean; ANewFolderName: String): TInputDirWizardPage;<br />
          function <a href="topic_isxfunc_createinputfilepage.htm">CreateInputFilePage</a>(const AfterID: Integer; const ACaption, ADescription, ASubCaption: String): TInputFileWizardPage;<br />
          function <a href="topic_isxfunc_createinputoptionpage.htm">CreateInputOptionPage</a>(const AfterID: Integer; const ACaption, ADescription, ASubCaption: String; Exclusive, ListBox: Boolean): TInputOptionWizardPage;<br />
          function <a href="topic_isxfunc_createinputquerypage.htm">CreateInputQueryPage</a>(const AfterID: Integer; const ACaption, ADescription, ASubCaption: String): TInputQueryWizardPage;<br />
          function <a href="topic_isxfunc_createoutputmarqueeprogresspage.htm">CreateOutputMarqueeProgressPage</a>(const ACaption, ADescription: String): TOutputMarqueeProgressWizardPage;<br />
          function <a href="topic_isxfunc_createoutputmsgmemopage.htm">CreateOutputMsgMemoPage</a>(const AfterID: Integer; const ACaption, ADescription, ASubCaption: String; const AMsg: AnsiString): TOutputMsgMemoWizardPage;<br />
          function <a href="topic_isxfunc_createoutputmsgpage.htm">CreateOutputMsgPage</a>(const AfterID: Integer; const ACaption, ADescription, AMsg: String): TOutputMsgWizardPage;<br />
          function <a href="topic_isxfunc_createoutputprogresspage.htm">CreateOutputProgressPage</a>(const ACaption, ADescription: String): TOutputProgressWizardPage;<br />
          <br />
          function <a href="topic_isxfunc_pagefromid.htm">PageFromID</a>(const ID: Integer): TWizardPage;<br />
          function <a href="topic_isxfunc_minimizepathname.htm">MinimizePathName</a>(const Filename: String; const Font: TFont; MaxLen: Integer): String;</code><br />
      </p>
    </div>
  <script type="text/javascript" src="../js/theme_selector.js"></script>
  </body>
</html>
